1
00:00:00,012 --> 00:00:04,709
>> So now we have seen the base beta
structure that we maintain including the

2
00:00:04,709 --> 00:00:10,022
Mutext relations, we have seen how Forward
Planning Graph Expansion works, and we

3
00:00:10,022 --> 00:00:15,027
have seen how backwards search in the
planning graph works, which means we now

4
00:00:15,027 --> 00:00:20,308
can put all this together and finally come
out with the Graphplan Algorithm.

5
00:00:20,309 --> 00:00:26,474
And here is the function graphplan, that
takes a propositional planning problem

6
00:00:26,474 --> 00:00:32,089
consisting of a set of actions, an initial
state, and a goal description.

7
00:00:32,090 --> 00:00:37,677
And the high-level structure of this
algorithm is as follows: we first expand

8
00:00:37,677 --> 00:00:43,202
the planning graph, until we get to a
graph that may contain a solution.That's

9
00:00:43,202 --> 00:00:48,557
what happens here in this part, and then
we try to extract the solution which

10
00:00:48,557 --> 00:00:54,252
happens here and again in this loop, and
see If this fails, we've got to expand the

11
00:00:54,252 --> 00:00:58,187
planning graph again.
So this loop continues to expand the

12
00:00:58,187 --> 00:01:01,408
planning graph.
Now, also doing the backwards search in

13
00:01:01,408 --> 00:01:03,971
the planning graph.
And now in more detail.

14
00:01:03,971 --> 00:01:06,576
So we start by initializing some
variables.

15
00:01:06,576 --> 00:01:09,931
I is the layer we're currently looking at,
searching at.

16
00:01:09,931 --> 00:01:14,246
Then we have the no good table.
We have our proposition layer p-zero which

17
00:01:14,246 --> 00:01:18,252
is initially the initial state.
And we have our planning graph which

18
00:01:18,252 --> 00:01:21,686
initially only contains the proposition
layer p-zero.

19
00:01:21,686 --> 00:01:27,135
Then, in this loop, we increase our layer
and we simply expand the planning graph to

20
00:01:27,135 --> 00:01:31,909
include the next action and proposition
layer as we've seen earlier in the

21
00:01:31,909 --> 00:01:36,803
definition of the function expand.
And, we have to continue expanding the

22
00:01:36,803 --> 00:01:40,542
planning graph until.
All the propositions in the goal are

23
00:01:40,542 --> 00:01:45,302
contained in our proposition layer, in the
last proposition layer, and none of them

24
00:01:45,302 --> 00:01:48,393
are Mutex that's what these last two
conditions are.

25
00:01:48,393 --> 00:01:53,060
But we also need to stop this loop when
we've reached a fixed point in our graph.

26
00:01:53,060 --> 00:01:57,728
Then this loop is followed by this if
statement here, which simply tests the

27
00:01:57,728 --> 00:02:02,327
reason why we have stopped our algorithm.
If we stopped because we found a

28
00:02:02,327 --> 00:02:06,989
proposition layer that contains all our
goals and none of them are mutually

29
00:02:06,989 --> 00:02:09,503
exclusive.
Then we can continue.

30
00:02:09,503 --> 00:02:15,196
Otherwise, we have to return failure.
That means we basically stopped our loop.

31
00:02:15,196 --> 00:02:18,918
Because we found a fixed point, but not
our goal yet.

32
00:02:18,918 --> 00:02:23,455
So now we have a planning graph that may
contain a solution plan.

33
00:02:23,455 --> 00:02:28,670
And the first thing we do is we remember
the size of the no good table here.

34
00:02:28,671 --> 00:02:33,718
And the reason why we do this is because
this tells us when we have determinate in

35
00:02:33,718 --> 00:02:38,625
our algorithm as we will see shortly.
So now we have reached the point where we

36
00:02:38,625 --> 00:02:43,106
can try to extract the plan from our
planning graph and we do this here.

37
00:02:43,106 --> 00:02:47,329
Star is now variable big pi.
And if this was failure so we can't find

38
00:02:47,329 --> 00:02:51,965
the plan in this planning graph, then of
course one option is to expand the

39
00:02:51,965 --> 00:02:55,386
planning graph with another layer, set of
layers.

40
00:02:55,386 --> 00:03:00,453
And then again we try to extract a plan
from this planning graph that now contains

41
00:03:00,453 --> 00:03:05,457
an additional action proposition layer.
And again, we store this in our variable

42
00:03:05,457 --> 00:03:10,129
big pi.Now, if the return value is an
actual plan, that means we have won we can

43
00:03:10,129 --> 00:03:14,426
return this plan as a solution.
So we test this in the next step we test

44
00:03:14,426 --> 00:03:19,526
whether this plan was failure, and if it's
not, then we go to this loop if it's still

45
00:03:19,526 --> 00:03:24,251
not failure then we come to the point
where we will return our solution Plan,

46
00:03:24,251 --> 00:03:29,276
but if it was failure and we have reached
a fixed point in the plan, so an expansion

47
00:03:29,276 --> 00:03:34,301
of the plan will no longer give us more
propositions or more actions in our action

48
00:03:34,301 --> 00:03:38,149
layers, then we have to test whether we
need to terminate.

49
00:03:38,149 --> 00:03:43,666
And condition for termination is now this.
If the size of the no-good table did not

50
00:03:43,666 --> 00:03:47,135
increase.
So we still found exactly the same nodes,

51
00:03:47,135 --> 00:03:52,404
and failed at exactly the same nodes.
Then an expansion of the graph will not do

52
00:03:52,404 --> 00:03:55,719
us any good.
And that means we can return failure.

53
00:03:55,719 --> 00:04:00,954
Otherwise, we store the size of the
no-good table, and remember that for the

54
00:04:00,954 --> 00:04:05,814
next iteration of the loop.
So that was the detailed graph plan

55
00:04:05,814 --> 00:04:09,783
algorithm.
And here are a few final words about

56
00:04:09,783 --> 00:04:16,610
properties of the graph plan algorithm.
And in short, these properties are that

57
00:04:16,610 --> 00:04:22,539
the graph plan algorithm is sound,
complete, and always terminates.

58
00:04:22,539 --> 00:04:27,493
So this means that the graph plan
algorithm returns failure if and only if

59
00:04:27,493 --> 00:04:30,544
the given planning problem has no
solution.

60
00:04:30,544 --> 00:04:36,301
Otherwise it will return a layered plan,
the structure we've described before, that

61
00:04:36,301 --> 00:04:39,354
is a solution to the given planning
problem.

62
00:04:39,354 --> 00:04:44,774
And this plan will consist of a minimal
number of layers but that does not mean it

63
00:04:44,774 --> 00:04:48,492
will consist of a minimal number of
actions of course.

64
00:04:48,492 --> 00:04:53,307
So in that sense, it's not guaranteed to
be optimal.

65
00:04:53,307 --> 00:04:58,042
But we have seen that Graphplan works on
the propositional STRIPS representation.

66
00:04:58,042 --> 00:05:02,202
But again, remember, the STRIPS
representation can always be translated

67
00:05:02,202 --> 00:05:06,672
into the propositional representation, so
that is not really a restriction.

68
00:05:06,672 --> 00:05:11,440
The important thing here is that
Graphplan, when it came out, was really a

69
00:05:11,440 --> 00:05:16,626
lot faster than all the previous planning
algorithms we've described so far.

70
00:05:16,626 --> 00:05:19,762
So it was really a step forward in
performance.

71
00:05:19,762 --> 00:05:25,208
And a lot of that has to do with the basic
data structure it maintains, the planning

72
00:05:25,208 --> 00:05:28,396
graph.
The backwards search itself is of course

73
00:05:28,396 --> 00:05:33,192
rather inefficient.
And still requires exponential time.

74
00:05:33,192 --> 00:05:40,408
But is the reachability analysis that is
performed by the planning graph that gives

75
00:05:40,408 --> 00:05:46,265
the algorithm a lot of power.
So, that was the Graphplan Algorithm.

76
00:05:46,265 --> 00:05:53,038
Graphplan solves the same planning problem
as states based search or plan based

77
00:05:53,038 --> 00:05:56,500
search.
But it does so in a very different way.

78
00:05:56,500 --> 00:06:01,576
Namely by first generating the planning
graph, the basic data structure that

79
00:06:01,576 --> 00:06:05,754
underlies its search.
And we have seen here the algorithm that

80
00:06:05,754 --> 00:06:10,731
can be used to generate the Planning
Graph, which is Forward Planning Graph

81
00:06:10,731 --> 00:06:14,277
Expansion.
And most importantly, this can be done in

82
00:06:14,277 --> 00:06:18,994
polynomial time, and tells us something
about reachability of nodes.

83
00:06:18,994 --> 00:06:26,274
And this Forward Expansion, together with
the Backwards Search, make up the Planning

84
00:06:26,274 --> 00:06:27,792
Graph Algorithm.
