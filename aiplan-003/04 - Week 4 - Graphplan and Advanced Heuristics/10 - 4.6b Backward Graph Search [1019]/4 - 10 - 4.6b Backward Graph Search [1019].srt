1
00:00:00,012 --> 00:00:06,899
>> I've mentioned earlier that the
backwards search is actually a graph

2
00:00:06,899 --> 00:00:09,831
search.
And here is how that works.

3
00:00:09,831 --> 00:00:16,207
Suppose we are given our planning graph
with the ultimate goal in proposition

4
00:00:16,207 --> 00:00:20,491
layer pk.
Then we go backwards through the graph and

5
00:00:20,491 --> 00:00:24,281
somehow find some sub goals in this layer
pj.

6
00:00:24,281 --> 00:00:29,472
And then we continue the search and this
may lead to a different set of sub goals

7
00:00:29,472 --> 00:00:33,926
in our proposition layer pi.
Now suppose somewhere between pi and p0

8
00:00:33,926 --> 00:00:37,690
the search fails.
So we come across and action layer where

9
00:00:37,690 --> 00:00:41,442
we try to identify actions that achieve
all the sub goals.

10
00:00:41,442 --> 00:00:46,728
But these actions are mutex, and therefore
we cannot find an appropriate set of

11
00:00:46,728 --> 00:00:49,167
actions.
So the search has failed.

12
00:00:49,167 --> 00:00:55,182
Then what we can do is, we remember that
in layer pi, we had these 3 nodes here

13
00:00:55,182 --> 00:01:00,796
that together were not achievable.
So we continue with our backtracking

14
00:01:00,796 --> 00:01:06,472
process, and we go back to layer pj, but
then from there we need to find different

15
00:01:06,472 --> 00:01:11,804
actions, we go through different
combinations and we may end in our layer,

16
00:01:11,804 --> 00:01:17,652
p i, again, choosing in a different way
the same combinations of preconditions or

17
00:01:17,652 --> 00:01:22,142
sub-goals in this layer.
But since have seen the combination of

18
00:01:22,142 --> 00:01:27,680
sub-goals in this layer before, and it was
previously not achievable in the planning

19
00:01:27,680 --> 00:01:32,360
graph, we know that it still can't be
achievable so we don't need to do the

20
00:01:32,360 --> 00:01:36,317
search again.
So effectively, what we do is remember the

21
00:01:36,317 --> 00:01:40,436
search states we have encountered and
where we have failed.

22
00:01:40,436 --> 00:01:45,869
That is, each search state is a set of
sub-goals in a specific proposition layer,

23
00:01:45,869 --> 00:01:50,902
and by remembering these search nodes we
effectively do a graph search.

24
00:01:50,902 --> 00:01:56,668
And we could just throw all these nodes
that we want to remember into a big hash

25
00:01:56,668 --> 00:02:00,425
table.
But here's a more efficient data structure

26
00:02:00,425 --> 00:02:05,993
that helps us remember what we've seen
before, the so-called nogood table.

27
00:02:05,993 --> 00:02:11,579
The nogood table denoted by this symbol
here that looks like an upside down

28
00:02:11,579 --> 00:02:17,069
triangle or as the Greek letter nebula is
For a planning graph up to layer k

29
00:02:17,069 --> 00:02:21,789
consisting of an array of k sets of sets
of goal propositions.

30
00:02:21,789 --> 00:02:27,710
So, we have k layers in our planning graph
and our array also have length k which

31
00:02:27,710 --> 00:02:33,625
means each of the elements of the array is
for a specific layer, and then In each

32
00:02:33,625 --> 00:02:37,336
layer we have a set of set of goal
propositions.

33
00:02:37,336 --> 00:02:42,683
The inner set is one combination of
propositions that cannot be achieved.

34
00:02:42,683 --> 00:02:47,651
So that effectively is a sub goal.
One surge node that we've looked at

35
00:02:47,651 --> 00:02:51,050
before.
The outer set are all the combinations

36
00:02:51,050 --> 00:02:54,620
that cannot be achieved at that specific
layer.

37
00:02:54,620 --> 00:02:59,419
And there are really only two types of
operations we need to do on this data

38
00:02:59,419 --> 00:03:02,523
structure.
Namely, before we are searching for

39
00:03:02,523 --> 00:03:07,813
sub-goal, g, in our proposition layer, pj.
What we do is look in our no good table to

40
00:03:07,813 --> 00:03:11,214
see whether we've encountered the sub-goal
before.

41
00:03:11,214 --> 00:03:15,277
And remember we only star those sub-goals
where we have failed.

42
00:03:15,277 --> 00:03:19,900
So we have to check whether our new
sub-goal, the sub-goal that we're

43
00:03:19,900 --> 00:03:25,003
currently looking for is enabler of j, so
whether it Is in the jth layer and we

44
00:03:25,003 --> 00:03:29,264
failed here before.
If it wasn't in that layer then we have to

45
00:03:29,264 --> 00:03:35,006
search for the set g in this layer Pj and
this will either succeed in which case we

46
00:03:35,006 --> 00:03:40,574
have found the plan, or it will fail and
then we have to add our sub goal to nabla

47
00:03:40,574 --> 00:03:43,684
of j.
Remembering that this is a sub-goal at

48
00:03:43,684 --> 00:03:47,464
which we have failed before in the j
proposition layer.

49
00:03:47,464 --> 00:03:52,087
So, the mutex relation for each
proposition there, gives us pairs of

50
00:03:52,087 --> 00:03:55,437
propositions that cannot be achieved
together.

51
00:03:55,437 --> 00:04:01,808
The nogood table goes farther, as it gives
us sets of propositions that cannot be

52
00:04:01,808 --> 00:04:05,561
achieved together in this proposition
layer.

53
00:04:05,561 --> 00:04:10,186
Okay, now it's time to put all this into
pseudo code.

54
00:04:10,186 --> 00:04:17,082
And this is the first of 2 functions that
we will define to perform the backward

55
00:04:17,082 --> 00:04:20,058
search.
The function extract takes three

56
00:04:20,058 --> 00:04:23,388
parameters.
The first parameter, capital G, is the

57
00:04:23,388 --> 00:04:28,645
planning graph that we've generated
through our forward expansion mechanism.

58
00:04:28,645 --> 00:04:33,033
The second parameter is the goal that
we're currently looking for.

59
00:04:33,033 --> 00:04:37,031
This is originally the overall goal of the
planning problem.

60
00:04:37,031 --> 00:04:42,185
And finally, the parameter I tells us
where in the planning graph we're looking

61
00:04:42,185 --> 00:04:45,424
for this goal.
And we're looking for it in the I

62
00:04:45,424 --> 00:04:49,325
proposition later.
Then the first thing we do is we check

63
00:04:49,325 --> 00:04:55,052
whether the layer we're looking at is our
proposition layer P0, Because that means

64
00:04:55,052 --> 00:05:00,447
we have reached pour goal so to speak, and
we can return the empty plan If this is

65
00:05:00,447 --> 00:05:05,427
not the case, then we have to use the no
good table and we check whether our

66
00:05:05,427 --> 00:05:09,041
current sub-goal is in the no good table
at layer I.

67
00:05:09,041 --> 00:05:14,229
If this is the case, we failed here
before, and we can return failure again.

68
00:05:14,230 --> 00:05:19,702
If we haven't seen this sub-goal g in
layer i before, then we call our function

69
00:05:19,702 --> 00:05:25,312
gpSearch, that I'll explain to you in a
minute, which extracts a plan up to layer

70
00:05:25,312 --> 00:05:28,915
i from our planning graph, and returns
that plan.

71
00:05:28,915 --> 00:05:33,104
So this can be either a layered plan, or
it can be failure.

72
00:05:33,105 --> 00:05:37,681
If it's unequal to failure.
So if we found a plan, then we simply pass

73
00:05:37,681 --> 00:05:42,966
this plan through, we return this plan.
Otherwise, this is the case where we've

74
00:05:42,966 --> 00:05:48,057
seen our sub-goal g for the first time.
We've tried to search for it, and we've

75
00:05:48,057 --> 00:05:51,324
failed.
So that means, we need to update our noga

76
00:05:51,324 --> 00:05:56,151
table, and we add our subgoal, g.
To the no good table at layer i.

77
00:05:56,151 --> 00:06:02,109
And then, we simply return failure,
because we haven't found a plan at this

78
00:06:02,109 --> 00:06:05,637
point.
So, as you can see, most of the work is

79
00:06:05,637 --> 00:06:11,161
done in this function gpSearch, and that's
what we will look at now.

80
00:06:11,161 --> 00:06:17,387
The function gpSearch takes four
arguments, the first argument is the

81
00:06:17,387 --> 00:06:24,836
planning graph, the second argument is the
goal we are trying to achieve in layer pi.

82
00:06:24,836 --> 00:06:30,887
So i identifies the layer in which we try
to achieve the set of goals, and Pi, are

83
00:06:30,887 --> 00:06:36,653
the actions from layer AI, the action
layer AI, that we have chosen to add to

84
00:06:36,653 --> 00:06:39,415
the plan.
And as we have just seen, in the

85
00:06:39,415 --> 00:06:44,945
definition of the function extract, what
we actually pass in here are, the planning

86
00:06:44,945 --> 00:06:48,433
graph, then the original set of goals in
that layer.

87
00:06:48,433 --> 00:06:53,567
So that's all the goals in that layer.
The empty set, so we start with no chosen

88
00:06:53,567 --> 00:06:56,940
actions.
And of course the layer I in which we're

89
00:06:56,940 --> 00:07:00,234
doing all this.
Then the first thing we do in this

90
00:07:00,234 --> 00:07:03,217
function is test whether the set g was
empty.

91
00:07:03,217 --> 00:07:06,973
That is the trivial case and we will deal
with that later.

92
00:07:06,973 --> 00:07:12,035
First I will look at the case where g
contains subgoals that we need to achieve

93
00:07:12,035 --> 00:07:15,488
in layer pi.
And if this is the case then we select one

94
00:07:15,488 --> 00:07:19,612
of those goals and this is denoted by the
proposition p here.

95
00:07:19,613 --> 00:07:25,354
And then the next step is we use the
positive effect links to choose a provider

96
00:07:25,354 --> 00:07:29,781
for this proposition.
And a provider must be as I just said a

97
00:07:29,781 --> 00:07:35,566
positive effect, but it also cannot be
mutually exclusive with an action that

98
00:07:35,566 --> 00:07:40,892
we've already chosen in our set, pi.
So this says there must not exist an

99
00:07:40,892 --> 00:07:46,677
action a-prime in our set, pi such that a
and a-prime are mutually exclusive in

100
00:07:46,677 --> 00:07:51,302
action layer a,i.
So this is the set of all actions in Ai

101
00:07:51,302 --> 00:07:56,650
that we could use to achieve P, and we
call this set the providers.

102
00:07:56,650 --> 00:08:01,964
Now, if the set of providers is empty,
then we can return failure.

103
00:08:01,964 --> 00:08:07,521
So that means all the actions we found in
the action layer Ai were mutually

104
00:08:07,521 --> 00:08:13,982
exclusive with action we already selected,
so we can't choose an additional actions

105
00:08:13,982 --> 00:08:19,025
that would give us the proposition p.
In that case, we return failure.

106
00:08:19,025 --> 00:08:24,008
But, if we have one or more actions that
can provide p, we need to choose one of

107
00:08:24,008 --> 00:08:29,380
them and this is actually the choice point
where our search branches that means we

108
00:08:29,380 --> 00:08:34,515
may need to come back here later when we
do backtracking and try out a different

109
00:08:34,515 --> 00:08:39,074
action to provide.
So this is our backtrack point, but now we

110
00:08:39,074 --> 00:08:43,678
have chosen a and that means we can
recursively call gpSearch.

111
00:08:43,678 --> 00:08:49,492
We keep the same planning graph of course
but now all the positive effects of our

112
00:08:49,492 --> 00:08:53,726
chosen action are no longer goals that we
need to achieve.

113
00:08:53,726 --> 00:08:59,188
Of course, p will be one of them, but
there may be multiple positive effects

114
00:08:59,188 --> 00:09:05,289
that can now be removed from our goal.
Then, we add the chosen action a to our

115
00:09:05,289 --> 00:09:11,505
currently chosen actions in the set pi.
And we continue to search in layer i.

116
00:09:11,505 --> 00:09:18,077
That means, every time we go through this
part of the algorithm, we reduce the set

117
00:09:18,077 --> 00:09:21,588
g.
And eventually, we will come to the point

118
00:09:21,588 --> 00:09:23,643
where this jet.
G is empty.

119
00:09:23,643 --> 00:09:28,407
We have no more sub-goals to satisfy in
this layer, and we have chosen some

120
00:09:28,407 --> 00:09:33,319
actions accumulated in the variable pi.
Then what we can do is what we call

121
00:09:33,319 --> 00:09:37,855
Extract, as shown here.
So we give it the same planning graph, and

122
00:09:37,855 --> 00:09:43,720
as the same sub-goal, we give it the union
over all the preconditions of the actions

123
00:09:43,720 --> 00:09:48,990
in our set, pi, and we search for those in
layer i minus one, in the preceding

124
00:09:48,990 --> 00:09:53,844
proposition layer, and this will return
either a plan or a failure.

125
00:09:53,844 --> 00:09:58,138
If it did return failure, then we simply
pass this through.

126
00:09:58,138 --> 00:10:04,224
And if it returned a plan, then we need to
concatenate this new layer, this new

127
00:10:04,224 --> 00:10:10,779
action layer, the chosen actions in this
action layer To this plan, and return this

128
00:10:10,779 --> 00:10:16,900
as the result of the function.
And that concludes the backwards search

129
00:10:16,900 --> 00:10:19,523
through our planning graph.
