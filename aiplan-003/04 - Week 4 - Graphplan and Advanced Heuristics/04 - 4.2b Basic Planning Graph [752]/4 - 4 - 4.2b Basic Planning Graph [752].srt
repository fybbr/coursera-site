1
00:00:00,012 --> 00:00:06,902
>> And here is part of the planning graph
for the simple dock worker robot example

2
00:00:06,902 --> 00:00:12,510
you've seen earlier.
You remember the initial state consisted

3
00:00:12,510 --> 00:00:18,958
of 6 proposition symbols and in our
proposition layer P0, we find nodes for

4
00:00:18,958 --> 00:00:23,863
these six symbols.
So, each of these proposition symbols,

5
00:00:23,863 --> 00:00:28,659
represent a node in our graph.
Which means we have six nodes.

6
00:00:28,659 --> 00:00:33,904
And the blue background is simply to
indicate the layer as a whole.

7
00:00:33,904 --> 00:00:39,612
So this is proposition layer p zero.
And with this proposition layer fully

8
00:00:39,612 --> 00:00:45,392
defined we can see which nodes are in the
following action layer and these are only

9
00:00:45,392 --> 00:00:49,791
those action symbols that would be
applicable in this state.

10
00:00:49,791 --> 00:00:55,407
Again, these are four individual nodes
here, all together making up the action

11
00:00:55,407 --> 00:00:58,854
layer A1.
And before we look at the next position

12
00:00:58,854 --> 00:01:03,714
there, we can introduce those edges that
connect these actions to their

13
00:01:03,714 --> 00:01:07,719
preconditions, and they are shown here.
As black lines.

14
00:01:07,719 --> 00:01:13,057
Now given our proposition layer P0 and our
actual layer A1 we can define our

15
00:01:13,057 --> 00:01:18,733
proposition layer P1 which contains all
the notes from P0 plus all the positive

16
00:01:18,733 --> 00:01:24,047
effect of actions in A1 and these are all
those propositions we see here.

17
00:01:24,047 --> 00:01:29,219
Again these are individual notes even if
they are not shown as such, the blue

18
00:01:29,219 --> 00:01:35,205
background indicates what constitutes this
proposition layer, and that is all that is

19
00:01:35,205 --> 00:01:39,308
in proposition layer P1.
And we need to connect this layer to the

20
00:01:39,308 --> 00:01:43,970
preceding action layer on the one hand,
through the positive effects of the

21
00:01:43,970 --> 00:01:46,667
actions, so these are the green lines
here.

22
00:01:46,667 --> 00:01:51,261
And then, we also have the negative
effects that are indicated as red lines

23
00:01:51,261 --> 00:01:54,680
here.
And this is the planning graph up to and

24
00:01:54,680 --> 00:02:00,102
including proposition layer p1.
And we can now continue with the action

25
00:02:00,102 --> 00:02:03,527
layer a2.
Now we take proposition layer p1 and

26
00:02:03,527 --> 00:02:09,490
interpret it as a state and see which
actions would be applicable in that state.

27
00:02:09,490 --> 00:02:14,554
And that's this list here.
That's all the actions that are in action

28
00:02:14,554 --> 00:02:18,310
layer a2.
And again we have to introduce edges or

29
00:02:18,310 --> 00:02:24,702
arcs from p1 to a2 representing all the
pre-conditions of these actions, and they

30
00:02:24,702 --> 00:02:29,202
are given here.
And with p1 and a2 defined, we can now see

31
00:02:29,202 --> 00:02:34,777
which nodes are in proposition layer two,
p2 and these are given here.

32
00:02:34,777 --> 00:02:39,413
Again, they're individual nodes rather
than just one set.

33
00:02:39,413 --> 00:02:44,028
But that is the whole set of nodes in
proposition layer p2.

34
00:02:44,028 --> 00:02:49,534
They are all the nodes from P1, plus the
positive effects of actions in A2.

35
00:02:49,534 --> 00:02:52,913
What's missing are of course still the
edges.

36
00:02:52,913 --> 00:02:58,111
And we need edges that connect
propositions in P2 to actions where they

37
00:02:58,111 --> 00:03:03,245
are positive and negative effects.
And again, we have green lines for

38
00:03:03,245 --> 00:03:07,716
positive effects and red lines for
negative effects here.

39
00:03:07,716 --> 00:03:13,774
And so on here come the propositions, that
are in action layer A3, and they are

40
00:03:13,774 --> 00:03:17,882
connected through edges to their,
preconditions.

41
00:03:17,882 --> 00:03:23,000
And we will do 1 more.
Here come the propositions, in proposition

42
00:03:23,000 --> 00:03:26,559
layer P3.
And again, we have to have edges that

43
00:03:26,559 --> 00:03:32,044
connect them to actions where they are
positive or negative effects.

44
00:03:32,044 --> 00:03:39,474
And of course, I could be continuing with
this graph here, but A, I'm running out of

45
00:03:39,474 --> 00:03:43,306
space, and B, I think you get the point
now.

46
00:03:43,306 --> 00:03:49,798
Earlier, I talked about reachability,
reachability of goals and reachability of

47
00:03:49,798 --> 00:03:55,210
individual propositions in a goal.
Now, we will look at the planning graph,

48
00:03:55,210 --> 00:03:59,266
and see what the planning graph can tell
us about reachability.

49
00:03:59,266 --> 00:04:02,506
So here is what we can say about the
planning graph.

50
00:04:02,506 --> 00:04:07,687
Suppose we are given a planning problem,
and construct the planning graph for this

51
00:04:07,687 --> 00:04:12,523
problem, then we have the following.
If a goal, g, is reachable from the

52
00:04:12,523 --> 00:04:17,917
initial state si, then there must be a
proposition layer Pg in our planning

53
00:04:17,917 --> 00:04:23,398
graph, such that all the goal conditions,
all the nodes representing those

54
00:04:23,398 --> 00:04:28,868
propositions that are goals, are a subset
of this proposition layer Pg.

55
00:04:28,869 --> 00:04:32,527
The proof of this is very simple, as you
can see.

56
00:04:32,527 --> 00:04:38,421
If the goal G is reachable from si, then
there must be a plan, which is an action

57
00:04:38,421 --> 00:04:43,826
sequence that achieves this goal.
And if we construct a planning graph,

58
00:04:43,826 --> 00:04:49,186
consisting of 2n plus 1 layers, where n is
the length of our solution plan.

59
00:04:49,186 --> 00:04:52,761
Then, this plan is contained in this
planning graph.

60
00:04:52,761 --> 00:04:57,436
Where we select the first action in the
first action layer, and so on.

61
00:04:57,436 --> 00:05:02,159
And that must achieve the goal.
So that means, in our last proposition

62
00:05:02,159 --> 00:05:04,546
layer.
All the gold proposition.

63
00:05:04,546 --> 00:05:09,416
Must be contained.
One caveat here is that this only works in

64
00:05:09,416 --> 00:05:13,804
one direction.
So if we have the first part true, then we

65
00:05:13,804 --> 00:05:19,120
can conclude that there must be such a
layer in the planning graph.

66
00:05:19,120 --> 00:05:22,535
So, you can look at it the other way
around.

67
00:05:22,535 --> 00:05:27,296
If there's a goal condition g.
That is not contained in our final

68
00:05:27,296 --> 00:05:31,797
planning graph layer PG.
Then this goal condition can't be acheived

69
00:05:31,797 --> 00:05:37,023
within this planning graph, and that of
course means that the overall goal can't

70
00:05:37,023 --> 00:05:41,612
be acheived in the planning graph.
So what this gives us is a neccasary

71
00:05:41,612 --> 00:05:46,457
condition for when a solution must exist
but not a sufficient condition.

72
00:05:46,458 --> 00:05:51,365
So we can compare this to the reachability
tree we have looked at earlier.

73
00:05:51,365 --> 00:05:56,753
The reachability tree was a sufficient
condition for testing whether a goal state

74
00:05:56,753 --> 00:05:59,503
exists.
And that is because all the nodes

75
00:05:59,503 --> 00:06:04,875
contained sets of propositions that must
necessarily hold in that state, and all

76
00:06:04,875 --> 00:06:08,453
the propositions in those states, were
consistent.

77
00:06:08,453 --> 00:06:14,073
Whereas the planning graph contains
propositions in these proposition layers

78
00:06:14,073 --> 00:06:19,385
that may hold, but whether they hold or
not depends on the action we select and

79
00:06:19,385 --> 00:06:23,654
the previous action layer.
Also the proposition layers quickly

80
00:06:23,654 --> 00:06:29,158
contain sets of inconsistent propositions.
That means, propositions that can never be

81
00:06:29,158 --> 00:06:32,883
true in the same state.
As we've seen, a robot can never be at

82
00:06:32,883 --> 00:06:36,028
location one and at location two at the
same time.

83
00:06:36,029 --> 00:06:42,201
Similarly, the actions in one action layer
may never be applicable at the same time.

84
00:06:42,201 --> 00:06:47,685
So that where actions for moving a robot
from one location to another and back in

85
00:06:47,685 --> 00:06:53,107
the same action layer Those two actions
can of course never occur in parallel.

86
00:06:53,107 --> 00:06:57,877
So the planning graph only gives us a
necessary condition for goal existence.

87
00:06:57,877 --> 00:07:02,833
We can look at the last proposition layer,
and if our goal is not contained in the

88
00:07:02,833 --> 00:07:08,166
last proposition layer, then this planning
graph does not contain a solution Plan.

89
00:07:08,166 --> 00:07:14,036
The big advantage of the planning graph is
of course the low complexity.

90
00:07:14,036 --> 00:07:20,850
The planning graph is polynomial in size
and it can be computed in polynomial time.

91
00:07:20,850 --> 00:07:26,014
And this can be seen quite easily because
each action layer and each proposition

92
00:07:26,014 --> 00:07:29,564
layer can contain at most all the
propositions we have.

93
00:07:29,564 --> 00:07:33,718
And that is a finite number.
And we have n layers in our graph so we

94
00:07:33,718 --> 00:07:38,240
can have n times the number of symbols we
have and that is polynomial.

95
00:07:38,240 --> 00:07:45,736
In other words, we have a criterion for
plan existence that we can evaluate in

96
00:07:45,736 --> 00:07:51,466
polynomial time.
But unfortunately it's only a necessary

97
00:07:51,466 --> 00:07:52,628
condition.
