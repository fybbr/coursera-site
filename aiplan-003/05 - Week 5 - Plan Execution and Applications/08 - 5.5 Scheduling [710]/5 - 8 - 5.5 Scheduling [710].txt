>> We have started this course by defining
a planning problem, and then I have spent
quite some time describing some algorithms
for solving this planning problem.
But you should now understand, that the
planning problem could have been defined
quite differently.
And, this is because we've made quite a
number of simplifying assumptions in our
original definition.
Dropping these assumptions would lead to
different problems, which would require
different algorithms to generate
solutions.
Now, we're going to briefly look at
another issue that we've ignored so far,
namely that actions need resources.
And in fact, time can also be seen as a
resource.
The approach that deals with planning with
resources, is known as scheduling .
Scheduling is a field that is really much
larger than artificial intelligence
planning, with lots of sub problems and
lots of algorithms to solve these
problems.
So what I'm going to do here is only
briefly talk about different types of
resources there are, and then talk about
how planning and scheduling can be
integrated.
Scheduling, deals with the problem of
assigning resources to actions.
This assumes that we've already decided
which actions we want to execute, so it
assumes that the planning process as we've
described it so far, has been done.
Now, the first question I need to answer
is, what is a resource?
And we can informally describe a resource
as an entity needed to perform an action.
This can be any type of entity.
And one way to integrate this into our
planning formalism, would be to extend the
operator definitions, by adding more
parameters, that describe the resources
that we need to execute instances of this
operator.
The parameters of an operator are of
course described by variables.
But not every parameter describes a
resource.
In fact, we can distinguish state
variables, and resource variables that are
parameters to an action.
State variables are usually those that are
modified by an action in some absolute
way.
For example, if we look at our move
operator that moves the robot r to
location l to location l prime, that
modifies the location where the robot is
in an absolute way.
We have the old location and the new
location.
So the location that is modified by the
move operator would be a state variable.
If we also wanted to model the fact that
the robot consumes fuel while it is
moving, we would use a resource variable
to do that.
And our modified operator description
would then say that moving the robot from
location l to l prime, uses the given
amount of fuel.
This would modify the overall amount of
fuel available to the robot in some
relative way, and that's why this would be
a resource variable.
Now, there are a number of different
resource types that we can distinguish,
and often the algorithm for solving
scheduling problems is associated with a
given resource type.
The most common distinction we most often
see, is of reusable versus consumable
resources.
Reusable resources, are as the name
suggests reusable, so they are available
to another action after one action has
completed.
This could be for example a truck that we
use to transport something from one
location to another, after the
transporting is done the truck is
available to another action.
Consumable resources, on the other hand,
are used up by the action.
An example of that would be the fuel used
by the robot.
Another important distinction especially
from an algorithmic point of view, is
whether our resources are discreet or
continuous.
Discrete resources, usually come in a
countable number of units.
So, for example, the cranes that we had
available in the dock worker robot domain,
or if we have screws and bolts that we use
in our domain.
Continuous resources usually have a real
valued amount, so that would be something
like bandwidth or electricity that our
actions consume.
Another important special case are uniary
resources.
These are resources where we have exactly
only one available.
Uniary resources are particularly
interesting when the resource is not
sharable, because in that case, only one
action that needs this uniary resource,
can be executed at a time.
If resources are sharable, the problem
usually becomes easier, but there's
usually some kind of capacity constraint
on the share rebel resource.
An example of a share rebel resource would
be a generator that generates electricity
for us.
Another complication is that resources can
have states.
For example, if we have a generator that
can produce different voltages as output,
but only one voltage at a time, that means
it is in a specific state producing a
specific output.
Now, all the actions that need the
resource in that state can use it in
parallel, but actions that need it in a
different state can't use it at the same
In time.
So as you can see, there are many
different types of resources that we may
have to use.
And often we require a combination of
resources to execute and action.
And all this has to be taken in to account
by scheduling algorithm that assigns
resources to actions.
One way to look at planning and scheduling
together, is that we decide to first solve
the planning problem.
Then what we can do, given this action
sequence that it produces as output, is we
can assign time points to the beginning
and end of each action.
And then finally we could say, we go from
there to the resources and assign
resources to the actions at given times.
But this may not be a very clever
approach.
For example, if we are given a deadline,
then, first choosing an action sequence
and assigning time to the actions in it,
may lead to inconsistent plans that we
want to rule out at the, the planning
stage.
So we have a feedback from time to the
planning itself.
Similarly the planning is influenced by
the resources and vice versa.
If we don't have the resources for certain
actions available, then there's no point
in including them in our plan.
And of course, time and resources also
interact, especially when we have things
like shareable resources with a limited
capacity or uniary resources.
So, what I'm trying to say here, is, these
problems really interfere with each other.
And an optimal approach is probably one
that interleaves the working on the
different types of problems we see here,
as part of the solution generation
process.
So, such a process would work on action
selection, timing these actions, and
assigning resources to these actions at
the same time.
