1
00:00:04,580 --> 00:00:10,351
What we still need to formally define is 
when an action is applicable in a state, 

2
00:00:10,351 --> 00:00:13,700
and what the corresponding state 
transition is. 

3
00:00:13,700 --> 00:00:17,634
To do this I will first introduce a 
little notation. 

4
00:00:17,634 --> 00:00:23,309
Suppose we're given a set L of literals. 
So, these are positive and negative 

5
00:00:23,309 --> 00:00:26,714
atoms. 
Then I can use this here, this symbol L 

6
00:00:26,714 --> 00:00:32,541
plus to refer to those atoms that are 
positive in L and I can use L L minus to 

7
00:00:32,541 --> 00:00:36,021
refer to those atoms whose negations are 
in L. 

8
00:00:36,021 --> 00:00:41,696
So L plus and L minus are sets of atoms 
namely those that are positive and 

9
00:00:41,696 --> 00:00:46,950
negative in L respectively. 
Now, let A be an action, and S be a 

10
00:00:46,950 --> 00:00:50,351
state. 
And when I say action here, I mean 

11
00:00:50,351 --> 00:00:56,897
action, a ground instance of an operator. 
Then we can say that the action A is 

12
00:00:56,897 --> 00:01:01,063
applicable in the state S, if two 
conditions hold. 

13
00:01:01,063 --> 00:01:07,609
Namely, all the positive preconditions of 
A, preconditions plus, of A, must be a 

14
00:01:07,609 --> 00:01:12,066
subset of the state, S. 
And we also want none of the negative 

15
00:01:12,066 --> 00:01:17,170
preconditions of A to be in S and this 
can be expressed by this expression. 

16
00:01:17,170 --> 00:01:22,207
The intersection of the negative 
preconditions and what is in the state S 

17
00:01:22,207 --> 00:01:25,766
must be empty. 
In other words there can not be a 

18
00:01:25,766 --> 00:01:29,399
negative precondition that is also a true 
in the state. 

19
00:01:29,399 --> 00:01:34,750
A is applicable in S if all the positive 
preconditions hold in S and none of the 

20
00:01:34,750 --> 00:01:38,851
negative preconditions hold in S. 
And now we can define the state 

21
00:01:38,851 --> 00:01:41,493
transition function gamma for a given 
state. 

22
00:01:41,493 --> 00:01:44,075
That's the state in which we are 
initially. 

23
00:01:44,075 --> 00:01:47,197
And the action A that we are applying in 
this state. 

24
00:01:47,197 --> 00:01:51,340
And this can be defined as follows. 
We start off with the state, and we 

25
00:01:51,340 --> 00:01:55,723
deduct all the negative effects. 
As I told you earlier, this is the delete 

26
00:01:55,723 --> 00:01:58,004
list. 
So we delete this from the state. 

27
00:01:58,004 --> 00:02:02,147
And then we add all the positive effects 
so we add them to the state. 

28
00:02:02,147 --> 00:02:05,390
And again, I've already explained. 
This is the add list. 

29
00:02:05,390 --> 00:02:08,166
So we start off with a set of ground 
atoms. 

30
00:02:08,166 --> 00:02:11,845
We remove some ground atoms and we add 
some ground atoms. 

31
00:02:11,845 --> 00:02:16,945
And this is the state that we get as a 
result of applying the state transition 

32
00:02:16,945 --> 00:02:22,138
function, in state as using action A. 
One minor point that is of quite a lot of 

33
00:02:22,138 --> 00:02:27,328
importance and some detail, is that we 
first delete the negative effects and 

34
00:02:27,328 --> 00:02:32,176
then add the positive effects. 
That means, if there is an atom that is a 

35
00:02:32,176 --> 00:02:37,640
negative effect and a positive effect. 
It will be in the resulting state because 

36
00:02:37,640 --> 00:02:43,122
it is first removed and then added again. 
You may wonder, why would you ever want 

37
00:02:43,122 --> 00:02:47,647
to have an action that has the same atom 
as a negative and positive effect. 

38
00:02:47,647 --> 00:02:51,708
Well, maybe have look at the move action 
that we've just introduced. 

39
00:02:51,708 --> 00:02:55,885
And see whether this would ever be 
possible that an atom can occur as a 

40
00:02:55,885 --> 00:03:00,119
negative and a positive effect depending 
on what values I choose for the 

41
00:03:00,119 --> 00:03:04,904
variables. 
Finding the actions that are applicable 

42
00:03:04,904 --> 00:03:08,225
in a given state is actually a non 
trivial problem. 

43
00:03:08,225 --> 00:03:13,043
You can see this quite easily when you 
think about the number of possible 

44
00:03:13,043 --> 00:03:16,168
actions that may be applicable in a given 
state. 

45
00:03:16,168 --> 00:03:20,921
Namely, all those operator instances 
where you replace every parameter by 

46
00:03:20,921 --> 00:03:25,023
every possible value. 
That would give you an exponential number 

47
00:03:25,023 --> 00:03:28,747
of actions. 
In general there are way fewer actions 

48
00:03:28,747 --> 00:03:33,733
applicable in this state, though. 
And here is an algorithm that you can use 

49
00:03:33,733 --> 00:03:38,450
to find the applicable instances of a 
given operator in a given state. 

50
00:03:38,450 --> 00:03:42,168
This function, add applicables, takes 
five parameters. 

51
00:03:42,168 --> 00:03:46,167
The first is A, the set of actions and 
this is initially empty. 

52
00:03:46,167 --> 00:03:50,535
This is just the set in which we collect 
the result of this functions for the 

53
00:03:50,535 --> 00:03:53,839
applicable actions. 
Then we give it an operator of which we 

54
00:03:53,839 --> 00:03:56,527
seek instances that are applicable in our 
state. 

55
00:03:56,527 --> 00:04:00,783
We have a set of remaining preconditions 
of this operator so these are the 

56
00:04:00,783 --> 00:04:05,318
preconditions we still need to look at. 
Initially these are all the preconditions 

57
00:04:05,318 --> 00:04:08,230
of the operator. 
Then we have a substitution for the 

58
00:04:08,230 --> 00:04:10,806
variables that are parameters of the 
operator. 

59
00:04:10,806 --> 00:04:13,382
Initially no variables are replaced by 
values. 

60
00:04:13,382 --> 00:04:17,526
And then, of course, we have the state in 
which we are trying to apply this 

61
00:04:17,526 --> 00:04:20,296
operator. 
So, the algorithm will first deal with 

62
00:04:20,296 --> 00:04:24,353
all the positive pre-conditions. 
So at first, tests whether there are 

63
00:04:24,353 --> 00:04:28,349
positive pre-conditions left. 
And if there are none left, it goes to 

64
00:04:28,349 --> 00:04:31,988
the first part here. 
And if there are positive pre-conditions 

65
00:04:31,988 --> 00:04:36,582
left, it will go to the second part here, 
the second part of this if statement. 

66
00:04:36,582 --> 00:04:41,354
And the first thing we do is select the 
next positive pre-condition that we are 

67
00:04:41,354 --> 00:04:45,530
trying to apply to restrict the actions 
that we can apply in this state. 

68
00:04:45,530 --> 00:04:51,098
So PP is the positive precondition that 
we look at next, and then we go through 

69
00:04:51,098 --> 00:04:56,525
all the propositions in our state here as 
P, and try to match this against PB. 

70
00:04:56,525 --> 00:04:59,435
Of course, 
if the predicate doesn't match it can 

71
00:04:59,435 --> 00:05:02,395
never be a match and therefore we can 
ignore these. 

72
00:05:02,395 --> 00:05:06,284
We only look, need to look at those 
propositions that have the same 

73
00:05:06,284 --> 00:05:08,780
predicate. 
And then we extend the current 

74
00:05:08,780 --> 00:05:13,249
substitution that we were given as our 
parameter such that the two SP and PP 

75
00:05:13,249 --> 00:05:15,919
match. 
This gives us a new substitution and if 

76
00:05:15,919 --> 00:05:20,504
this substitution is valid it means we 
were able to extend the substitution. 

77
00:05:20,504 --> 00:05:25,135
Then we can do a recursive call and the 
recursive call goes as follows: We dont 

78
00:05:25,135 --> 00:05:29,447
change the set of actions in this case. 
We simply use the same operator again. 

79
00:05:29,447 --> 00:05:33,870
We remove the precondition from the set 
of preconditions that we've just dealt 

80
00:05:33,870 --> 00:05:36,445
with. 
So PP is the one we've just exploited, we 

81
00:05:36,445 --> 00:05:40,476
no longer need to look at that. 
We've changed the substitution by adding 

82
00:05:40,476 --> 00:05:43,780
more, values to variables. 
And the state remains the same. 

83
00:05:43,780 --> 00:05:49,223
We go through this loop until there are 
no more positive preconditions, and then 

84
00:05:49,223 --> 00:05:52,490
we end up in the first case of the if 
statement. 

85
00:05:52,490 --> 00:05:56,057
So now we've dealt with all the positive 
preconditions. 

86
00:05:56,057 --> 00:05:59,042
We now look at all the negative 
preconditions. 

87
00:05:59,042 --> 00:06:04,491
So we loop over NP where NP is a negative 
precondition and all we have to do is now 

88
00:06:04,491 --> 00:06:08,448
check whether our state falsifies this 
negative precondition. 

89
00:06:08,448 --> 00:06:12,860
If this is the case then this cannot 
result in an applicable action. 

90
00:06:12,860 --> 00:06:18,001
But if the state does not falsify the 
negative preconditions then we have found 

91
00:06:18,001 --> 00:06:23,142
an instance of this operator up that we 
were given that is an applicable action 

92
00:06:23,142 --> 00:06:26,484
in this state. 
And that, what we have to do is simply 

93
00:06:26,484 --> 00:06:31,240
replace all the parameters of this 
operator according to the substitution 

94
00:06:31,240 --> 00:06:36,818
that we've been building up. 
Here is an example that should illustrate 

95
00:06:36,818 --> 00:06:40,675
this algorithm. 
In this example, we are given our state 

96
00:06:40,675 --> 00:06:43,709
over here. 
That's the set of ground atoms. 

97
00:06:43,709 --> 00:06:49,332
And we have our PDDL action defined here. 
That is the move action we've seen 

98
00:06:49,332 --> 00:06:52,958
previously. 
So these are the two parameters we've 

99
00:06:52,958 --> 00:06:57,693
seen in our algorithm. 
that's the operator is the move action, 

100
00:06:57,693 --> 00:07:03,316
and s is the state we were just given. 
The other parameters are an empty set. 

101
00:07:03,316 --> 00:07:08,800
The pre-conditions of the move operator. 
And an empty substitution. 

102
00:07:08,800 --> 00:07:13,828
The algorithm then starts by testing 
whether there are positive preconditions 

103
00:07:13,828 --> 00:07:18,664
left which is the case which means we 
immediately go to the L parts of the 

104
00:07:18,664 --> 00:07:21,823
algorithm. 
And the first thing there is we choose 

105
00:07:21,823 --> 00:07:25,046
the next positive precondition we want to 
look at. 

106
00:07:25,046 --> 00:07:29,613
So let's go back to the example. 
The first positive preconditions is 

107
00:07:29,613 --> 00:07:34,550
adjacent from two and this is the first 
precondition we will pick here. 

108
00:07:34,550 --> 00:07:37,540
So that's PP, PP is this adjacency 
relation. 

109
00:07:37,540 --> 00:07:43,086
Looking back at the algorithm we see that 
the next step is to look for all those 

110
00:07:43,086 --> 00:07:47,262
state propositions that can match this 
positive precondition. 

111
00:07:47,262 --> 00:07:51,713
So let's look at our state. 
This is the adjacency relation and we 

112
00:07:51,713 --> 00:07:56,985
have two adjacency ground atoms in our 
state, namely location one to location 

113
00:07:56,985 --> 00:08:02,052
two and location two to location one. 
So these are the two cases here I've 

114
00:08:02,052 --> 00:08:05,681
listed for SP. 
The loop will go through those two and 

115
00:08:05,681 --> 00:08:09,323
succeed there. 
The next step in the algorithm, then, is 

116
00:08:09,323 --> 00:08:12,969
to extend the substitution, such that SP 
and PP match. 

117
00:08:12,969 --> 00:08:15,927
And we can see that this has happened 
here. 

118
00:08:15,927 --> 00:08:19,230
I'll go through the first case on the 
left here. 

119
00:08:19,230 --> 00:08:24,183
we've extended the substitution, such 
that the variable from, from our 

120
00:08:24,183 --> 00:08:28,517
precondition must be location one and 
two, must be location two. 

121
00:08:28,517 --> 00:08:35,260
So that adjacent one or two matches what 
we have here in our substitution. 

122
00:08:35,260 --> 00:08:38,377
The algorithm then continues with the 
recursive call. 

123
00:08:38,377 --> 00:08:42,846
Because the substitution is still valid. 
And it simply removes that positive 

124
00:08:42,846 --> 00:08:46,434
precondition from the preconditions that 
we still need to do. 

125
00:08:46,434 --> 00:08:49,316
So again, we end up at the entry to the 
algorithm. 

126
00:08:49,316 --> 00:08:52,080
See that there are positive preconditions 
left. 

127
00:08:52,080 --> 00:08:56,491
End up in the else branch. 
And select the next positive precondition 

128
00:08:56,491 --> 00:08:59,020
that we need to deal with in the 
algorithm. 

129
00:08:59,020 --> 00:09:03,591
And as we can see here the next positive 
preconditions at R from so that's the 

130
00:09:03,591 --> 00:09:08,279
next positive precondition we select and 
we need to match that against the state, 

131
00:09:08,279 --> 00:09:12,272
let's look at the algorithm again. 
So we're now here that we're going 

132
00:09:12,272 --> 00:09:16,496
through a loop over all of the 
propositions in the state that match this 

133
00:09:16,496 --> 00:09:20,650
positive precondition. 
And if we look at the at relations of the 

134
00:09:20,650 --> 00:09:25,176
state, there is only one option here. 
So this loop is only one long. 

135
00:09:25,176 --> 00:09:29,701
And we choose this here. 
So we try to extend the substitution such 

136
00:09:29,701 --> 00:09:35,119
that it matches this state proposition. 
And what we see here is that we need to 

137
00:09:35,119 --> 00:09:40,536
match R to R1, and from to location two. 
But in our substitution we have already 

138
00:09:40,536 --> 00:09:45,748
set that from must be location one. 
So it can't be location one and location 

139
00:09:45,748 --> 00:09:50,000
two at the same time. 
Which mean our substitution is not valid. 

140
00:09:50,000 --> 00:09:55,316
But if we go back to the algorithm. 
We had a branch here previously in this 

141
00:09:55,316 --> 00:09:59,428
loop that we haven't explored yet. 
And that is listed here. 

142
00:09:59,428 --> 00:10:03,539
Namely, where SP was adjacent, location 
one to location two. 

143
00:10:03,539 --> 00:10:08,359
And again, what we do is extend our 
substitution such that the state 

144
00:10:08,359 --> 00:10:11,691
proposition matches the positive 
pre-condition. 

145
00:10:11,691 --> 00:10:16,370
And we can do that here. 
So we have that our new substitution maps 

146
00:10:16,370 --> 00:10:20,080
from to location two, and two to location 
one. 

147
00:10:20,080 --> 00:10:22,560
Again, this is followed by the recursive 
call. 

148
00:10:22,560 --> 00:10:26,915
So we need to check whether there are 
more positive preconditions, just like in 

149
00:10:26,915 --> 00:10:29,616
the other case. 
And yes, there is another positive 

150
00:10:29,616 --> 00:10:32,538
precondition. 
The same one we dealt with in the other 

151
00:10:32,538 --> 00:10:36,231
case, the at relation. 
And again there is only one possible 

152
00:10:36,231 --> 00:10:38,546
instance in the state that can match 
that. 

153
00:10:38,546 --> 00:10:42,240
And that's at r1, location two. 
So, where are we now in our algorithm? 

154
00:10:42,240 --> 00:10:45,412
We are here. 
We need to extend the substitution, such 

155
00:10:45,412 --> 00:10:49,135
that the state proposition matches the 
positive precondition. 

156
00:10:49,135 --> 00:10:53,528
So let's go back to the example. 
What we have here is we need to match R 

157
00:10:53,528 --> 00:10:55,420
to R1. 
And again we can do that. 

158
00:10:55,420 --> 00:10:59,752
And we match from to location two. 
And again, previously we have matched 

159
00:10:59,752 --> 00:11:03,352
from to location two. 
So this is consistent with the way we 

160
00:11:03,352 --> 00:11:06,952
need to match from now. 
Which means we can actually, in this 

161
00:11:06,952 --> 00:11:10,979
case, extend the substitution. 
And have a new substitution in which 

162
00:11:10,979 --> 00:11:15,460
case, from. 
Is location two, two is location one. 

163
00:11:15,460 --> 00:11:19,463
And R is R1. 
So again this would be followed by the 

164
00:11:19,463 --> 00:11:24,890
recursive call here, and that means we 
reach the algorithm with a set of empty. 

165
00:11:24,890 --> 00:11:28,358
Positive preconditions. 
There are only negative preconditions 

166
00:11:28,358 --> 00:11:30,121
left. 
Let's look at the example. 

167
00:11:30,121 --> 00:11:32,964
We've dealt with adjacent and we've dealt 
with at. 

168
00:11:32,964 --> 00:11:36,490
So, there are only negative preconditions 
we need to deal with. 

169
00:11:36,490 --> 00:11:40,755
And the negative preconditions, then, 
that's this part here of the algorithm. 

170
00:11:40,755 --> 00:11:45,361
We go through every negative precondition 
and check whether this is falsified in 

171
00:11:45,361 --> 00:11:48,261
the state. 
Instantiated with our substitution sigma. 

172
00:11:48,261 --> 00:11:50,706
So, what does this look like in the 
example? 

173
00:11:50,706 --> 00:11:53,947
So, there's only one negative 
precondition in our example. 

174
00:11:53,947 --> 00:11:57,836
Namely, that. 
We want the location we're moving to not 

175
00:11:57,836 --> 00:12:02,216
to be occupied. 
And that is our MP now, which means it is 

176
00:12:02,216 --> 00:12:06,488
not occupied location one. 
In the example the variable we are 

177
00:12:06,488 --> 00:12:11,669
instantiating is two and our substitution 
tells us that two must be location one. 

178
00:12:11,669 --> 00:12:16,530
So this is the instantiated negative 
precondition not occupied location one. 

179
00:12:16,530 --> 00:12:21,886
And as we can see in the state, the only 
location that is occupied is location 

180
00:12:21,886 --> 00:12:24,976
two. 
Which means, our negative precondition is 

181
00:12:24,976 --> 00:12:29,027
not falsified here. 
So we can turn this into an action, that 

182
00:12:29,027 --> 00:12:32,255
we add to the set A. 
That's the final step here. 

183
00:12:32,255 --> 00:12:36,924
So we add to A, the instance of this 
operator, instantiated using our 

184
00:12:36,924 --> 00:12:42,143
substitution that we've defined here. 
That was the last substitution that we 

185
00:12:42,143 --> 00:12:44,958
had. 
And we get the operator, move R1, from 

186
00:12:44,958 --> 00:12:49,413
location two to location one. 
And indeed this is the only applicable 

187
00:12:49,413 --> 00:12:53,140
action here, and that means we are done 
with this algorithm. 

