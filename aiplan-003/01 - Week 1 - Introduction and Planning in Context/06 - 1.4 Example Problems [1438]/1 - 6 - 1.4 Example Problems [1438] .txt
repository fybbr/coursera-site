We have now seen how planning problems 
can be formulated as search problems. 
And we have also seen a basic algorithm 
that can be used to solve search 
problems. 
We have also already seen some examples 
of search problems such as the 
missionaries and cannibals problem. 
Now we shall look at some more example 
problems. 
The first problem we will look at is a 
toy problem. 
And it's a problem that has been around 
for a long time. 
The sliding tile puzzle or sliding block 
puzzle looks essentially like this. 
What we have is a grid. 
Here, it's a three by three grid. 
And in this grid, we have eight tiles. 
That is, one square remains empty. 
We can then shift the tiles in the grid. 
But, of course, we can only shift them 
into the empty slot. 
Leaving another slot empty as a result. 
The tiles themselves are numbered one 
through eight, and our task is to bring 
them into the right order, and the right 
order is showing here on the right, and 
this could be some initial state from 
which we start. 
So to formulate this as a search problem, 
we have to ask, what is the initial 
state? 
And the initial state for this problem 
could be any configuration of the tiles. 
So not just this one here shown on the 
left, but really any configuration you 
can think of. 
The goal state is usually fixed depending 
on where you look there are different 
varieties of what the goal state should 
be like. 
This is just one possible state that you 
see on the right where the tiles are in 
the correct order. 
Sometimes, you'll see the middle square 
should be empty, sometimes it's another 
square that should be empty. 
But there's usually one fixed goal state 
that much be reached in this puzzle. 
The actions that are possible, and I've 
already told you this. 
Are to move, a tile that is next to the 
empty space into the empty space. 
So I could either move the eight here or 
the four up. 
Or the six into the empty space. 
In this case, for this puzzle there would 
be three possible actions in this state. 
For the path cost, we simply assume that 
moving a tile has a unit cost, so all 
actions have equal cost. 
So, that's it. 
That's the definition of the eight 
puzzle. 
There are also larger versions of this 
puzzle on a four by four grid, with 
fifteen tiles, known as the fifteen 
puzzle. 
Or on a five by five grid with 24 tiles, 
known as the 24 puzzle, and so on. 
The next problem is also a toy problem. 
And it's known as the N queens problem in 
general, but we will look at the eight 
queens problem here. 
And the problem, is to find a 
configuration for eight queens on an 
eight by eight chess board, such that 
none of the queens attacks any of the 
others. 
For those of you who don't know chess, a 
queen is simply a chess piece that can be 
somewhere on the board. 
And it can move along any diagonal, any 
column, or any row. 
So, if we look, for example, at this 
queen here. 
It can move anywhere along this diagonal, 
or this diagonal. 
Or it can move anywhere in its row, or 
anywhere in this column. 
So you can see, this queen attacks none 
of the other queens, and is attacked by 
none of the other queens. 
If we look at this queen, however, 
we can see that if we move all the way 
along the diagonal. 
This queen is attacked by this queen. 
So this configuration shown here is not a 
solution to the problem. 
Now you may wonder how this can be seen 
as a planning problem because what we're 
looking for is a configuration, so a 
static state. 
And the answer is that we can look at 
this as a problem of reasoning about 
action. 
When we look at this here, it says we 
have to place the queens on the chess 
board. 
And we place the queens, one after 
another. 
So the initial state is the empty chess 
board. 
The actions we have available are placing 
queens onto the board. 
And the goal state is any state where the 
queens don't attack each other. 
Again we can assume a unit cost for the 
actions, so all actions are equally 
expensive. 
And I'll give you a hint how this can be 
formulated a little more efficiently 
because, if we allow a queen to be placed 
on any board position, we have 64 
different positions. 
And this would create a pretty big search 
tree. 
So what we can do is we say that the 
first action can only place a queen in 
the first column. 
So we can only place a queen here. 
The second action in our plan must place 
a queen in the second column. 
And so on. 
So our plan will definitely be eight 
steps long and we only have eight 
possibilities for each step in the plan. 
So this defines the N queen's problem as 
a general search problem, or as a 
planning problem. 
The next problem is more like a real 
world problem, and it is the dockworker 
robots problem that is also used in the 
book this, course is based on, so you 
will see this problem occur again and 
again. 
The aim with this problem is to have one 
example that we can use to illustrate 
many of the techniques and algorithms 
that will be introduced in this course. 
The advantage of this problem is that it 
is not trivial to solve, but it also can 
be described fairly quickly. 
the informal description of this problem 
is this, we have a harbor in which we 
have several locations which may be docks 
or other places. 
at these docks there may be ships, and we 
have storage areas for containers that 
need to be moved around at the docks or 
loaded onto ships. 
We also have parking areas for trucks 
that can carry containers. 
And they will be robots, in our cases, or 
trains that arrive with the containers. 
There will also be cranes to move the 
different containers around. 
They can load containers on to ships or 
robots or they can unload them from ships 
and robots. 
And what we will be interested in is 
generating plans for the cranes and the 
robots that achieve certain configuration 
of containers that we give as goal 
states. 
Now there are some people who say that 
block stacking or container stacking, 
which is essentially the same thing, is 
not a real-world problem. 
So this is why I've included this picture 
here, so this proves that it is a 
real-world problem. 
Now let's look at the state of the world 
in the dock worker robot example. 
What we have in each state are locations 
and in this example there are two 
locations L1 and L2 and these locations 
are connected by paths along which the 
robot for example can move. 
So these two locations are adjacent 
because they are connected by a path. 
At each location we have cranes which can 
be used to move the containers around. 
They can move the containers between the 
different piles that are available. 
And here at this location L2, we see 
there are two piles, P2 and Q2. 
In this case they are both empty. 
There's no containers on these piles. 
But at the bottom of every pile we will 
always have a pallet onto which we can 
stack the container. 
So the pallet tells us where the bottom 
of the pile is. 
A pile itself is an abstract object. 
It doesn't necessarily need to have 
anything in it. 
An empty pile isn't really something we 
can touch. 
But it can have containers in it. 
And containers are, of course, what we 
have the most of in most states. 
So here in this example, we have six 
different containers. 
They're called CA, CB, CC, CD, CE, and 
CF. 
And they can be stacked on top of each 
other in a pile, as I've already 
explained. 
There's no limit to how high a pile can 
be, despite the fact that it looks in 
this picture like the crane can only 
reach so high, but we will consider 
arbitrarily high stacks of containers. 
Finally, what we have in these states are 
robots. 
This is one robot here, though so there's 
only one robot. 
That is an object that can be loaded with 
a container by the crane. 
And then once it has a container on it, 
it can move to a different location. 
It, of course, can also move, when it's 
empty, to a different location. 
But there can only be one container on a 
robot at one time. 
Also, at each location, we can only have 
one robot at a time. 
We consider a location occupied when a 
robot is there. 
So, I think that's pretty much all you 
need to know about the world states and 
the dock worker robot example. 
But just to clarify this, not all states 
will have two locations, and six 
containers, and one robot. 
We will consider a different world with 
many different numbers of robots, 
containers, or locations and cranes and 
they will give us more complexity to the 
problem. 
You can probably guess what the different 
action types in this domain are, but here 
they are just to make sure that we are 
all on the same page and understand what 
they are. 
The first action. 
Is the move action and the move action 
moves a robot, that's the first argument 
in this action, from one location, the 
second argument, to some adjacent and 
unoccupied other location, L prime. 
So as result of this action, the robot 
will be now in a different location. 
That other location must be unoccupied 
and it must be adjacent, which means 
there must be a path that connects the 
two locations, L and L prime. 
That was the only action that is to be 
done by the robot. 
The other actions are all done by the 
crane. 
So, the first one of those actions is to 
take action and we can take a container 
C, with an empty crane K, from the top of 
a pile. 
And they must all be located at the same 
location L. 
So this action as a result will have the 
crane holding the container and all these 
objects must have been at the same 
location obviously. 
The river's action is to put down the 
container C that is held by the crane on 
top of a pile. 
And they must again all be located at the 
same location L. 
Two more actions, again, both to be done 
by the crane. 
The one is loading a container. 
But this will involve a robot, too. 
So what we do is we load a container C, 
that is held by the crane K onto an 
unloaded robot R. 
So the robot must not already have a 
container on it. 
And, again, this must all be at the same 
location. 
And the reverse action is to unload the 
container from. 
The robot. 
That's the robot. 
And, again, the crane must be empty so 
that we can do this, and all of the 
objects must be at the same location. 
So, these are the five action types that 
are available in the doc worker robot 
domain. 
Notice that I said action types, because 
there can be many instances of these 
actions, depending on how I instantiate 
these parameters. 
So if there's only one robot, then this 
robot may be the only one that can move, 
but it can move between different 
locations, and these are all different 
actions. 
We will specify all this more formally 
when we have introduced an action 
description language, and that will be 
next week. 
And here is a very simple example of what 
the state transition system that 
corresponds to the dark work or robot 
problem could look like. 
You can see this is a very simple 
problem, because a large state space 
wouldn't fit onto one slide, so I had to 
reduce everything to one robot, one 
crane, one container, and two locations, 
which gives us six possible world states, 
and they're named here S0, S1, S2, S3, 
and so on, 
S4, S5. 
The objects you see in these states are 
exactly the things I have just talked 
about. 
So we have a robot here. 
We have a crane. 
And we have a container, a palette, and 
the two locations I just talked about. 
And the actions are in principals. 
Also, those I've just mentioned. 
And they give us the state transitions. 
And we've labeled them here, the state 
transitions. 
So the take action gets us from state s 
zero to state s1. 
And so on, put action would get us back 
to that state, we have move one action 
which moves the robot to location one and 
we have a move two action which moves the 
robot to location two. 
As you can see from the state 
transitions, the system is static. 
Which means there are no events 
happening. 
All the actions are under our control. 
Also, the system is deterministic. 
Which means, every action leads to 
exactly one other state. 
So there are no two transitions from one 
state that lead to different states given 
the same action. 
If we do move one in this state, we 
always get to this state. 
There's no other option. 
This is a deterministic state transition 
system. 
Like I said before you will see a lot 
more about the dock worker robot problem 
so I will stop here. 
So this concludes this first segment of 
the course. 
And here is a quick summary of what we've 
learned so far. 
The first question we've looked at 
is'What is planning?'. 
And more specifically'what is planning in 
AI?'. 
And the answer we have come up with is 
that planning is an explicit deliberation 
process that chooses and organizes 
actions by anticipating their outcomes. 
Planning in AI is the computational study 
of this deliberation process. 
Next, we have looked at a conceptual 
model for planning, which helps us define 
the semantics of planning problems. 
To this end, we have defined the state 
transition system, which consists of four 
things. 
A set of states, a set of actions, and a 
set of events were the first three 
components. 
And the most complex one is the state 
transition function, which maps a given 
state and an action or event, to another 
set of states. 
Then we have looked at the connection 
between planning and search. 
We have seen that planning problems can 
be phrased as search problems. 
Search problems can be defined by an 
initial state, a set of actions that are 
possible in different states, a set of 
goal states, and a path cost functions 
that tells us how much the individual 
actions cost. 
And finally, we've seen a number of 
example problems that can all be phrased 
as search problems. 

