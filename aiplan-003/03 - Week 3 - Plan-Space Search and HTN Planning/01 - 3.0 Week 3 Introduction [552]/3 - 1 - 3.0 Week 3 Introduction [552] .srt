1
00:00:00,012 --> 00:00:06,723
Welcome to Week 3 of the AI planning
course. In week one we've already seen in

2
00:00:06,735 --> 00:00:13,227
informal introduction to the planning
problem we're trying to address in this

3
00:00:13,239 --> 00:00:20,132
course. And we've seen some of the context
in which planning takes place. In Week 2

4
00:00:20,144 --> 00:00:25,594
then, we've seen two main things. We've
seen search algorithms, and we've seen the

5
00:00:25,606 --> 00:00:30,616
Strips Planner. For search algorithms, we
first talked about heuristics, and how

6
00:00:30,628 --> 00:00:35,834
they encode knowledge that helps us guide
the search. And then, we've used this

7
00:00:35,846 --> 00:00:41,081
knowledge in the a-star algorithm for
graph search. Finally we've talked about

8
00:00:41,093 --> 00:00:45,786
how to find good heuristics, as good
heuristics are vital for the performance

9
00:00:45,798 --> 00:00:50,633
of A star algorithm. Then we've moved over
to the Strips system. The Strips system

10
00:00:50,645 --> 00:00:55,397
gave us the Strips' representation which
describes operators as consisting of

11
00:00:55,409 --> 00:01:00,462
preconditions and effects and the effects
are often divided into an add and a delete

12
00:01:00,474 --> 00:01:05,544
list. Then we've had a formal definition
of the planning problem we are trying to

13
00:01:05,556 --> 00:01:10,458
solve in this course. And we've seen some
algorithms that we can use to solve this,

14
00:01:10,813 --> 00:01:15,665
this problem. The first algorithm we've
seen is forward state space search. And

15
00:01:15,677 --> 00:01:20,437
then we've described a variant of that,
which is backwards states space search.

16
00:01:20,541 --> 00:01:25,368
Both searching the same state space. In
addition to all this technical material,

17
00:01:25,472 --> 00:01:30,570
we've shown you some features. In Week 1,
we had a feature on planning for robots.

18
00:01:30,673 --> 00:01:35,203
And in week 2, we've seen a feature by
Nils Nilson on the X star algorithm and

19
00:01:35,215 --> 00:01:40,157
the Strips system they developed at SRI.
And this week, we'll have another feature,

20
00:01:40,260 --> 00:01:45,887
and I hope you will enjoy this. So far in
our search for solutions to planning

21
00:01:45,899 --> 00:01:52,225
problems, we have considered plans that
were sequences of actions. They may not

22
00:01:52,237 --> 00:01:58,265
have achieved the goals, but they were
plans in their own right. In the first

23
00:01:58,277 --> 00:02:03,320
half of the this week we're going to, to
look at a different search space that

24
00:02:03,332 --> 00:02:08,662
consists of partial plans. Partial plans
still consists of the same types of

25
00:02:08,674 --> 00:02:14,082
actions we've seen previously like the
move action here or this move action or

26
00:02:14,094 --> 00:02:19,631
the load act ion so they're the same
actions. What is new is that we explicitly

27
00:02:19,643 --> 00:02:25,176
record the rationale of why we have an
action in a plan. For example here, we see

28
00:02:25,188 --> 00:02:30,256
that we have an effect of this action, and
we're using this to achieve the

29
00:02:30,268 --> 00:02:36,173
precondition of another action and we've
introduced this link here. To record this

30
00:02:36,185 --> 00:02:41,658
fact. Also we have explicit ordering
constraints, something you see here and

31
00:02:41,670 --> 00:02:47,243
here, that tells us in which order we have
to execute the actions. That makes it

32
00:02:47,255 --> 00:02:53,198
possible for us to have partial plans that
include a partial order, so actions can be

33
00:02:53,210 --> 00:02:59,093
in paraelle. Finally, partial plans may
not have fully instantiated actions. Some

34
00:02:59,105 --> 00:03:05,064
of the actions may contain variables. That
is something I've already mentioned during

35
00:03:05,076 --> 00:03:10,471
lifted backward search, that is possible
and impartial order planning that is

36
00:03:10,483 --> 00:03:15,647
usually done. The first planner that
implemented this algorithm was the UCPOP

37
00:03:15,915 --> 00:03:21,720
planner in the early 1990s. And we will
see the pseudo-code for this planning

38
00:03:21,732 --> 00:03:27,390
algorithm later in this segment. In the
2nd half of this week we're going to do

39
00:03:27,402 --> 00:03:33,640
something completely different, namely,
we're going to change the planning problem

40
00:03:33,652 --> 00:03:39,675
that we are trying to solve. So far, our
planning problem consisted of, amongst

41
00:03:39,687 --> 00:03:45,193
other things, A goal which defines a set
of goal states. In the new type of

42
00:03:45,205 --> 00:03:50,509
planning we're going to look at here.
We're not trying to achieve goals. But

43
00:03:50,521 --> 00:03:56,311
we're trying to accomplish tasks. Tasks
can be seen as high level disruptions of

44
00:03:56,323 --> 00:04:02,188
activity that we want to execute. But they
are so high level that we don't know how

45
00:04:02,200 --> 00:04:07,715
to directly do them. So the approach we're
taking, usually, is to break them down

46
00:04:07,727 --> 00:04:13,049
into smaller tasks. And we do this until
we reach a level where tasks are so small

47
00:04:13,061 --> 00:04:18,431
that we have an operator in our planning
domain, that directly accomplishes this

48
00:04:18,443 --> 00:04:23,715
task. For example, the first sub-task
here, that we have in this decomposition

49
00:04:23,727 --> 00:04:28,826
tree, that decomposes our overall tasks
into smaller tasks, would be to take

50
00:04:28,838 --> 00:04:34,282
something with a crane excetera. And we've
already seen that our planning domains

51
00:04:34,294 --> 00:04:40,183
contain Operators that can directly
accomplish these so called primitive

52
00:04:40,195 --> 00:04:46,567
tasks. And that is the approach we take in
hierarchical task network planning, or

53
00:04:46,579 --> 00:04:52,461
short HTN. A lot of practical planning
systems take this approach as you've

54
00:04:52,473 --> 00:04:58,326
already heard my colleague, Austin Tate,
tell you in week 1. We will look at a

55
00:04:58,338 --> 00:05:03,733
slightly simplified version of this
problem called STN planning. This will be

56
00:05:03,745 --> 00:05:08,678
described in detail, but then I'll
describe what is different about HTN

57
00:05:08,690 --> 00:05:13,854
planning. And hopefully you will
understand that the power of HTN planning

58
00:05:13,866 --> 00:05:18,774
largely comes from the fact that it
handles constraints on world states

59
00:05:18,786 --> 00:05:24,212
explicitly. And since there are many
different types of constraints that can be

60
00:05:24,224 --> 00:05:29,605
handled. HTN planners can be adapted to
specific applications. So, now, before we

61
00:05:29,617 --> 00:05:34,832
start with the technical material for week
3. I want to, again, remind you of the

62
00:05:34,844 --> 00:05:39,693
social platform that comes with this
course. There is the discussion forum,

63
00:05:39,802 --> 00:05:45,039
which you can use to post questions and
get help. And there's also the Course Wiki

64
00:05:45,051 --> 00:05:49,480
that you can use to collect useful
information. Please make good use of them.
