1
00:00:00,012 --> 00:00:07,502
Before we finish with plan-space search, 
I want to introduce another refinement to 

2
00:00:07,502 --> 00:00:13,768
the generic algorithm we've just seen. 
This is the algorithm as it was 

3
00:00:13,768 --> 00:00:20,827
implemented in the UCPOP planner that was 
developed about the early 90s,' if I 

4
00:00:20,827 --> 00:00:24,977
remember correctly. 
In the algorithm as we've seen it so far, 

5
00:00:24,977 --> 00:00:29,752
it considers two types of flaws, 
unachieved goals and threats. And every 

6
00:00:29,752 --> 00:00:35,077
time we go through our main loop, one of 
these flaws is removed from the plan and 

7
00:00:35,077 --> 00:00:39,502
potentially others introduced. 
The UCPOP planner only considers 

8
00:00:39,502 --> 00:00:43,922
unachieved goals and deals with threads 
as part of the main loop. 

9
00:00:43,922 --> 00:00:49,462
So, here is the data flow of the PSP 
algorithm as we've seen it so far. 

10
00:00:49,462 --> 00:00:56,354
We start off with our initial plan, pi 0, 
that plan consists of actions, orderings, 

11
00:00:56,354 --> 00:01:01,240
bindings, and causal links. 
Then, what we do is we compute the 

12
00:01:01,240 --> 00:01:05,441
threats and the open goals which are the 
flaws in our over all plan. 

13
00:01:05,441 --> 00:01:09,992
Then, if we find there is no flaw in our 
plan, we can return this plan as a 

14
00:01:09,992 --> 00:01:13,437
solution plan. 
However, if there are flaws in the plan, 

15
00:01:13,437 --> 00:01:17,622
then we got to select one of these flaws, 
compute the resolvers. 

16
00:01:17,622 --> 00:01:21,903
If there are no resolvers for the 
selected flaw, then we can return failure 

17
00:01:21,903 --> 00:01:25,378
because this plan can never be refined 
into a solution plan. 

18
00:01:25,378 --> 00:01:29,772
If there is a resolver, then we've got to 
choose one of the resolvers that are 

19
00:01:29,772 --> 00:01:33,726
possible, apply those resolver. 
And while we apply the resolver, we've 

20
00:01:33,726 --> 00:01:37,731
got to retain our ordering constraints 
and our binding constraints such that 

21
00:01:37,731 --> 00:01:40,243
variable bindings and orders are always 
consistent. 

22
00:01:40,243 --> 00:01:44,316
Then, we go back in our loop and start 
with the beginning with the partial plan 

23
00:01:44,316 --> 00:01:48,634
that we consider. 
The UC pop planner is different and that 

24
00:01:48,634 --> 00:01:53,590
it does not deal with the computation and 
handling of threats at this stage in the 

25
00:01:53,590 --> 00:01:56,857
algorithm. 
In fact, threats are moved to a different 

26
00:01:56,857 --> 00:01:59,623
part. 
Namely, after the open goals are dealt 

27
00:01:59,623 --> 00:02:02,296
with. 
The algorithim will deal with all the 

28
00:02:02,296 --> 00:02:06,559
threats that are caused by the resolver 
for the open goal flaw. 

29
00:02:06,559 --> 00:02:11,290
And this may cause a little loop here, 
namely one where all the threats are 

30
00:02:11,290 --> 00:02:14,712
dealt With. 
The input to the PoP planner or to the 

31
00:02:14,712 --> 00:02:20,323
UCPOP planner to be more specific, looks 
slightly different from what we've seen 

32
00:02:20,323 --> 00:02:23,447
so far. 
We have an extended input that takes a 

33
00:02:23,447 --> 00:02:28,263
partial plan as input, that is the same 
initial plan we've seen before. 

34
00:02:28,263 --> 00:02:33,437
And the second component it takes as 
input is an agenda, an agenda of things 

35
00:02:33,437 --> 00:02:38,022
that still need to be done. 
Abd this is the set of pairs of actions 

36
00:02:38,022 --> 00:02:43,172
and preconditions of these actions. 
So, these are all the open goal flaws 

37
00:02:43,172 --> 00:02:48,822
that exist in the current partial plan. 
Initially, that is, of course, all the 

38
00:02:48,822 --> 00:02:54,317
preconditions of the goal dummy action. 
The agenda is simply the way to avoid 

39
00:02:54,317 --> 00:02:58,759
recomputing the open goals every time we 
go through the loop. 

40
00:02:58,759 --> 00:03:02,484
Where the loop here is implemented as a 
recursive function. 

41
00:03:02,484 --> 00:03:05,657
Search control of the algorithm is then 
by flaw type. 

42
00:03:05,657 --> 00:03:09,984
That means, we have the unachieved 
sub-goals as part of our agenda, and 

43
00:03:09,984 --> 00:03:13,942
every time we go through our algorithm, 
we go through the loop. 

44
00:03:13,942 --> 00:03:18,533
We select one of the unachieved sub-goals 
and remove that as a flaw from our 

45
00:03:18,533 --> 00:03:21,496
partial plan, potentially introducing 
others. 

46
00:03:21,496 --> 00:03:26,316
Threats, on the other hand, are resolved 
as part of the successor generation. 

47
00:03:26,316 --> 00:03:30,957
So, internally to the algorithm, we 
remove all the threats so that when we 

48
00:03:30,957 --> 00:03:35,678
generate a new search node, that will 
have no threats in it. 

49
00:03:35,678 --> 00:03:39,862
Finally, we get to the pseudo code for 
our partial order planner. 

50
00:03:39,862 --> 00:03:45,278
This is essentially the algorithm that is 
implemented by the UCPOP planning system. 

51
00:03:45,278 --> 00:03:50,502
Unfortunately, the algorithm is a little 
more complex than the algortithms we've 

52
00:03:50,502 --> 00:03:54,235
seen previously, so I have to distribute 
it over two slides. 

53
00:03:54,235 --> 00:03:56,767
So, this is the first part of the 
algorithm. 

54
00:03:56,767 --> 00:04:01,392
And what we define here, is a function 
PoP, which implements our partial order 

55
00:04:01,392 --> 00:04:04,152
planner. 
And this function takes two arguments. 

56
00:04:04,152 --> 00:04:08,542
Firstly, a partial order plan, which 
initially is our initial plan pi 0. 

57
00:04:08,542 --> 00:04:13,167
And it takes an agenda, which consists of 
all the unsatisfied subgoals in our 

58
00:04:13,167 --> 00:04:16,392
current plan. 
In our initial plan, these were only the 

59
00:04:16,392 --> 00:04:21,109
preconditions of the goal dummy action. 
Then, the algorithm begins by testing 

60
00:04:21,109 --> 00:04:24,985
whether the agenda is empty. 
So, if there are no more unsatisfied 

61
00:04:24,985 --> 00:04:28,158
preconditions, 
that means our plan contains no more 

62
00:04:28,158 --> 00:04:30,954
flaws. 
And that means it's a solution plan for 

63
00:04:30,954 --> 00:04:34,202
our planning problem, 
and we can return this plan as a 

64
00:04:34,202 --> 00:04:37,425
solution. 
However, if there are still items left on 

65
00:04:37,425 --> 00:04:42,054
the agenda, then we need to select one of 
these as the flaw we want to work on 

66
00:04:42,054 --> 00:04:45,001
next. 
And the selection is deterministic choice 

67
00:04:45,001 --> 00:04:48,316
point, which means we don't need to 
backtrack over it. 

68
00:04:48,316 --> 00:04:52,962
The reason is, again, that we need to 
work on all agenda items eventually and 

69
00:04:52,962 --> 00:04:57,265
it's only important for efficiency in 
which order we do that but not for 

70
00:04:57,265 --> 00:05:01,079
completeness. 
So, now we've chosen a pair, which is an 

71
00:05:01,079 --> 00:05:05,965
agenda entry, consistent of an action ag, 
and the precondition pg. 

72
00:05:05,965 --> 00:05:10,583
The next step, simply removes the chosen 
entry from our agenda. 

73
00:05:10,583 --> 00:05:16,222
Then, we have to compute all the 
providers for our chosen precondition pg. 

74
00:05:16,222 --> 00:05:21,472
A provider, of course, can be any action 
that has an effect that can unify with 

75
00:05:21,472 --> 00:05:24,347
pg. 
This could be an action that is already 

76
00:05:24,347 --> 00:05:29,747
in the plan or it could be a new instance 
of an operator that we introduce into the 

77
00:05:29,747 --> 00:05:32,547
plan. 
So this gives us our set of relevant 

78
00:05:32,547 --> 00:05:34,622
actions. 
If this set is empty, 

79
00:05:34,622 --> 00:05:39,597
if there are no relevant actions, then 
there is no way to resolve this flaw, 

80
00:05:39,597 --> 00:05:44,640
which means we can return failure. 
So, what we do at this point is go up in 

81
00:05:44,640 --> 00:05:49,995
our search tree to the nearest backtrack 
point and try an alternative branch. 

82
00:05:49,995 --> 00:05:55,244
Now, if our set of relevant actions 
wasn't empty, then we can do this now, we 

83
00:05:55,244 --> 00:05:59,217
can choose one. 
This is a nondeterministic choice point, 

84
00:05:59,217 --> 00:06:04,582
which means here we set up a backtrack 
point where we branch in our search tree. 

85
00:06:04,582 --> 00:06:09,669
And if any of those branches returns 
failure, we simply go back and explore 

86
00:06:09,669 --> 00:06:12,862
the next branch. 
Choosing a resolver gives us three 

87
00:06:12,862 --> 00:06:15,912
things. 
Firstly, it gives us an action that we've 

88
00:06:15,912 --> 00:06:19,902
chosen as the provider. 
It gives us a proposition that is one of 

89
00:06:19,902 --> 00:06:24,752
its effects that unifies with our 
unachieved sub-goal, and the substitution 

90
00:06:24,752 --> 00:06:29,767
sigma is the substitution that makes the 
unachieved sub-goal and the effect the 

91
00:06:29,767 --> 00:06:33,027
same. 
Given our chosen resolver, we can now 

92
00:06:33,027 --> 00:06:38,744
start to refine the plan accordingly. And 
the first thing we do is we add a causal 

93
00:06:38,744 --> 00:06:44,327
link and the new causal link links our 
chosen provider, ap, to our consumer, ag. 

94
00:06:44,327 --> 00:06:49,992
And the proposition that we are trying to 
protect is sigma of pg, the instantiated 

95
00:06:49,992 --> 00:06:53,581
goal proposition. 
Note that this is the same as sigma of pp 

96
00:06:53,581 --> 00:06:57,560
as sigma unifies the two. 
And in addition to this causal link, we 

97
00:06:57,560 --> 00:07:01,575
also need to add new bindings to our 
variable binding constraints. 

98
00:07:01,575 --> 00:07:06,549
And those are exactly those bindings that 
are defined by the substitution sigma. 

99
00:07:06,549 --> 00:07:11,165
This is the first part of the algorithm, 
and the next part follows in the next 

100
00:07:11,165 --> 00:07:14,372
slide. 
So far, we have added cause of links and 

101
00:07:14,372 --> 00:07:17,897
variable bindings to our partial plan as 
necessary. 

102
00:07:17,897 --> 00:07:23,122
The next thing, the next component we 
want to modify in our partial plan is the 

103
00:07:23,122 --> 00:07:26,672
set of actions. 
And this depends on whether our chosen 

104
00:07:26,672 --> 00:07:31,547
provider, ap, was already an action or 
plan, or whether it was a new operator 

105
00:07:31,547 --> 00:07:34,590
instance that we introduced into the 
plan. 

106
00:07:34,590 --> 00:07:40,013
If it is a new instance of an operator, 
so if it was not an element of our plan, 

107
00:07:40,013 --> 00:07:44,417
then what we have to do is simply add 
that new action to our plan. 

108
00:07:44,417 --> 00:07:49,690
and we also have to add to the agenda all 
it's preconditions as unachieved 

109
00:07:49,690 --> 00:07:53,394
sub-goals. 
If our chosen provider was already part 

110
00:07:53,394 --> 00:07:59,004
of the plan, then we don't need to modify 
the set of actions of our partial plan. 

111
00:07:59,004 --> 00:08:04,273
In the next step, we simply generate a 
copy of our plan that we can modify in 

112
00:08:04,273 --> 00:08:08,214
the loop that follows. 
As I've explained earlier, the 

113
00:08:08,214 --> 00:08:13,415
introduction of new actions or new causal 
links into a partial plan may also 

114
00:08:13,415 --> 00:08:17,667
introduce new threats. And this is what 
we'll deal with next. 

115
00:08:17,667 --> 00:08:22,021
So, what we have here is a loop over all 
potentially new threats. 

116
00:08:22,021 --> 00:08:27,478
These are threats on our newly introduced 
causal link, or threats that are due to 

117
00:08:27,478 --> 00:08:30,888
the new action. 
Of course, if this was an existing 

118
00:08:30,888 --> 00:08:34,475
action, this cannot introduce new threats 
into the plan. 

119
00:08:34,475 --> 00:08:37,811
But we can always have threats on our new 
causal link. 

120
00:08:37,811 --> 00:08:42,953
So, for each of these threats, we have to 
compute the set of all possible resolvers 

121
00:08:42,953 --> 00:08:47,449
for the threat in our current plan. 
And if there are no resolvers for one of 

122
00:08:47,449 --> 00:08:52,102
those threats, that means we can return 
failure because there's no way or 

123
00:08:52,102 --> 00:08:54,872
removing that flaw from the plan. 
Again, 

124
00:08:54,872 --> 00:08:59,128
returning failure here means going to the 
next backtrack point and trying a 

125
00:08:59,128 --> 00:09:03,434
different branch in the search tree. 
If there are resolvers, then we need to 

126
00:09:03,434 --> 00:09:06,561
choose one of them. 
And again, this is a non deterministic 

127
00:09:06,561 --> 00:09:09,589
choice point, 
which means we may have to back track to 

128
00:09:09,589 --> 00:09:12,481
this point. 
If we fail in one of the branches, we go 

129
00:09:12,481 --> 00:09:16,472
back and try a different branch until we 
reach one where we succeed. 

130
00:09:16,472 --> 00:09:22,165
And then, we take our resolver that we've 
just chosen and apply that to our current 

131
00:09:22,165 --> 00:09:27,567
plan. So, we take the new plan and refine 
it according to that resolver, which 

132
00:09:27,567 --> 00:09:32,445
gives us a modified new plan. 
And then, we can simply do the recursive 

133
00:09:32,445 --> 00:09:35,460
call. 
So, we call our procedure PoP with our 

134
00:09:35,460 --> 00:09:39,777
new plan and our modified agenda. 
And, of course, our new plan only 

135
00:09:39,777 --> 00:09:44,887
contains flaws of the type unacheived 
precondition as all the threats have just 

136
00:09:44,887 --> 00:09:49,812
been resolved in the loop we've just gone 
through. And the agenda contains all 

137
00:09:49,812 --> 00:09:54,427
those unacheived preconditions. 
And that concludes our partial order of 

138
00:09:54,427 --> 00:09:58,192
planning algortihm, and it almost 
concludes this segment. 

139
00:09:58,192 --> 00:10:03,962
Now, before we finish with plan-space 
planning, here is a quick overview of how 

140
00:10:03,962 --> 00:10:08,121
plan-space planning compares to 
state-space planning. 

141
00:10:08,121 --> 00:10:13,942
Firstly, in state-space planning, we are 
dealing with a finite search space. 

142
00:10:13,942 --> 00:10:17,764
In each state, we only have an finite 
number of objects, we have a finite 

143
00:10:17,764 --> 00:10:20,905
number of relations. 
Which means, there's a finite number of 

144
00:10:20,905 --> 00:10:24,071
atoms that can relate the different 
objects to each other. 

145
00:10:24,071 --> 00:10:27,927
And that means there's only a finite 
number of states that we have in our 

146
00:10:27,927 --> 00:10:30,773
search space. 
In plan-space planning, on the other 

147
00:10:30,773 --> 00:10:33,532
hand, are search spaces potentially 
infinite. 

148
00:10:33,532 --> 00:10:38,481
You can easily see a plan can have 
potentially infinite length so there must 

149
00:10:38,481 --> 00:10:41,822
be an infinite number of plans in our 
search space. 

150
00:10:41,822 --> 00:10:46,944
But, of course, what matters in practice 
is the part of the search space that is 

151
00:10:46,944 --> 00:10:51,152
generated or that is explored before a 
solution plan is found. 

152
00:10:51,152 --> 00:10:56,172
And also, in state-space planning, our 
search space is usually a graph but what 

153
00:10:56,172 --> 00:10:59,342
we're searching is a tree, 
and the tree is infinite. 

154
00:10:59,342 --> 00:11:04,242
But, what we do have in state-space 
planning is an explicit representation of 

155
00:11:04,242 --> 00:11:08,792
the intermediate states that we're going 
through on our way to the goal. 

156
00:11:08,792 --> 00:11:12,237
In plan-space planning, during the 
planning process, 

157
00:11:12,237 --> 00:11:16,112
we don't know which intermediate states 
we will encounter. 

158
00:11:16,112 --> 00:11:20,635
This is quite an important distinction, 
as we will see later in the course, 

159
00:11:20,635 --> 00:11:25,362
because most of the modern heuristics 
that are used during planning rely on an 

160
00:11:25,362 --> 00:11:29,828
explicit representations of intermediate 
states that we are searching. 

161
00:11:29,828 --> 00:11:33,432
So, the heuristics are defined on states, 
on world states. 

162
00:11:33,432 --> 00:11:38,070
Next, in state-space planning, the 
ordering of the actions really reflects 

163
00:11:38,070 --> 00:11:41,360
the search control strategy that we, 
we've been using. 

164
00:11:41,360 --> 00:11:46,291
Whereas in plan-space planning the choice 
and the organization that we have in our 

165
00:11:46,291 --> 00:11:49,152
plan is independent of our search 
strategy. 

166
00:11:49,152 --> 00:11:53,346
So, in state-space planning, we consider 
one action after another, and the 

167
00:11:53,346 --> 00:11:57,714
ordering in which we consider them is 
also the ordering in which they end up in 

168
00:11:57,714 --> 00:12:01,883
our plan, even if there is no ordering 
constraint necessary between these 

169
00:12:01,883 --> 00:12:04,737
actions. 
In plan-space planning, we are much more 

170
00:12:04,737 --> 00:12:07,636
flexible. 
In fact, we have seen that in partial 

171
00:12:07,636 --> 00:12:11,946
plans, two actions in the plan don't 
necessarily need to be ordered with 

172
00:12:11,946 --> 00:12:14,795
respect to each other. 
They can be in parallel. 

173
00:12:14,795 --> 00:12:19,765
Also, in plan-space planning, we have an 
explicit representation of the rationale 

174
00:12:19,765 --> 00:12:23,415
why actions are in the plan that is given 
by the causal links. 

175
00:12:23,415 --> 00:12:26,544
There is no such structure in state-space 
planning. 

176
00:12:26,544 --> 00:12:30,169
We only have the sequence of actions that 
we need to execute. 

177
00:12:30,169 --> 00:12:35,392
This is quite important for the execution 
of the plan, namely when things go wrong. 

178
00:12:35,392 --> 00:12:40,467
If we then have the explicit knowledge of 
why we did an action, then it is much 

179
00:12:40,467 --> 00:12:45,392
easier to fix the current plan. 
And finally, in state-space planning the 

180
00:12:45,392 --> 00:12:50,567
search nodes we consider are relatively 
simple. That is, each search node is a 

181
00:12:50,567 --> 00:12:55,492
set of ground atoms, and the successors 
were relatively easy to compute. 

182
00:12:55,492 --> 00:12:59,965
I say relatively easy because there may 
still be an exponential number of 

183
00:12:59,965 --> 00:13:04,420
applicable actions, of course. But in 
practice, this is rarely the case. 

184
00:13:04,420 --> 00:13:09,172
In plan-space search, on the other hand, 
the search nodes are quite complex. 

185
00:13:09,172 --> 00:13:14,103
Meaning that we have constrained networks 
that we need to maintain as part of our 

186
00:13:14,103 --> 00:13:17,932
refinement process. 
So that means successors are potentially 

187
00:13:17,932 --> 00:13:21,807
expensive to compute. 
Overall, one can say that plan-space 

188
00:13:21,807 --> 00:13:25,207
planning was a big step forward when it 
was introduced. 

189
00:13:25,207 --> 00:13:29,897
But nowadays, due to efficient heuristics 
state-space planning is the more 

190
00:13:29,897 --> 00:13:32,662
eddicient way for searching for 
solutions. 

191
00:13:32,662 --> 00:13:36,099
This concludes the segment on plan-space 
search. 

192
00:13:36,099 --> 00:13:41,048
In this approach, we have introduced a 
new search space in which search nodes 

193
00:13:41,048 --> 00:13:44,998
are partial plans, 
and steps in our search space are planned 

194
00:13:44,998 --> 00:13:49,165
refinement operations. 
This is, of course, completely different 

195
00:13:49,165 --> 00:13:53,532
from the search-space we've considered 
during state-space search. 

196
00:13:53,532 --> 00:13:59,292
That means we also had to define a new 
initial state and a new goal test. 

197
00:13:59,292 --> 00:14:05,232
And what we did in our PSP algorithm was 
search for a plan that has no flaws. 

198
00:14:05,232 --> 00:14:10,102
Where a flaw can be either an unachieved 
sub-goal or a threat. 

199
00:14:10,102 --> 00:14:14,700
And finally, we've looked at a 
refinement, of this generic algorithm 

200
00:14:14,700 --> 00:14:20,190
that was implemented in the UCPOP planner 
where the only flaw we considered were 

201
00:14:20,190 --> 00:14:25,292
unachieved sub-goals, and threats were 
dealt with as part of the node generation 

202
00:14:25,292 --> 00:14:28,303
process. 
And that's all I was going to tell you on 

203
00:14:28,303 --> 00:14:28,832
partial order planning. 

