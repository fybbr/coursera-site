1
00:00:00,012 --> 00:00:06,329
We have now seen what Tasks and Task 
Networks are and how we can use methods 

2
00:00:06,329 --> 00:00:10,872
to decompose these tasks into sub tasks 
in a network. 

3
00:00:10,872 --> 00:00:17,577
That means we have the basics for our new 
search space, task networks as search 

4
00:00:17,577 --> 00:00:24,085
nodes at methods with decomposition as 
state transitions in this new search 

5
00:00:24,085 --> 00:00:28,056
space. 
That means we can now define domains, 

6
00:00:28,056 --> 00:00:31,897
problems and solutions to planning 
problems. 

7
00:00:31,897 --> 00:00:38,639
Let's start with STN planning domains. 
These are the reusable components that we 

8
00:00:38,639 --> 00:00:44,528
can use to define many problems. 
And an STN planning domain is simply a 

9
00:00:44,528 --> 00:00:49,194
pair consisting of a set of STRIPS 
planning operators. 

10
00:00:49,194 --> 00:00:54,924
That's the set O, that's it here. 
And it has also in addition a set of 

11
00:00:54,924 --> 00:00:58,372
methods STN methods. 
That's the set M. 

12
00:00:58,372 --> 00:01:04,524
So, you can see, it's an extension of the 
STRIPS planning we've seen before because 

13
00:01:04,524 --> 00:01:10,261
the operators still make up the domain. 
but, in addition to operators, we now 

14
00:01:10,261 --> 00:01:14,321
have a set of methods. 
That's really all there is to STN 

15
00:01:14,321 --> 00:01:18,829
planning domains. 
Now, one special case are total-order STN 

16
00:01:18,829 --> 00:01:24,815
planning domain and we say that a domain, 
D, is a total-order STN planning domain 

17
00:01:24,815 --> 00:01:28,636
if every method In its message said is 
totally ordered. 

18
00:01:28,636 --> 00:01:33,134
And later when we look at STN planning 
algorithms we will see that totally 

19
00:01:33,134 --> 00:01:36,283
ordered networks are slightly easier to 
deal with. 

20
00:01:36,283 --> 00:01:40,781
So first we will have this as an 
algorithm and secondly we'll introduce an 

21
00:01:40,781 --> 00:01:44,672
algorithm that solves partial order STN 
planning problems. 

22
00:01:44,672 --> 00:01:50,722
Now that we have defined STN planning 
domains we can turn to STN planning 

23
00:01:50,722 --> 00:01:54,962
problems. 
And an STN planning problem is a 4-tuple 

24
00:01:54,962 --> 00:02:00,815
consisting of Si, Wi, O and M. 
And I'll explain these four components. 

25
00:02:01,884 --> 00:02:06,711
The first component, Si, is the initial 
state of the world from which we are 

26
00:02:06,711 --> 00:02:09,567
planning. 
So, this is a set of ground atoms. 

27
00:02:09,567 --> 00:02:14,440
And that means, it's just like for a 
Strips planning problem, which also had 

28
00:02:14,440 --> 00:02:17,862
an initial state consisting of a set of 
ground atoms. 

29
00:02:17,862 --> 00:02:23,020
What is different here is that we don't 
have a goal component as part of our 

30
00:02:23,020 --> 00:02:26,961
planning problem. 
Instead, we are given an initial task 

31
00:02:26,961 --> 00:02:29,214
network. 
And that is what Wi is. 

32
00:02:29,214 --> 00:02:34,503
So the problem, then, consists of 
refining this initial task network into a 

33
00:02:34,503 --> 00:02:37,758
plan. 
And you will see that this initial task 

34
00:02:37,758 --> 00:02:43,203
network often consists of just a single 
task in which case this forms the route 

35
00:02:43,203 --> 00:02:47,740
of our decomposition tree. 
The remaining two components, O and M 

36
00:02:47,740 --> 00:02:52,951
simply form an STN planning domain that 
we also give as part of our planning 

37
00:02:52,951 --> 00:02:56,134
problem. 
So you can see an STN planning problem is 

38
00:02:56,134 --> 00:02:59,326
not very different from a strips planning 
problem. 

39
00:02:59,326 --> 00:03:02,894
We still have an initial state and we 
still have a domain. 

40
00:03:02,894 --> 00:03:07,547
Of course, the domain is now a domain 
consisting of operators and methods. 

41
00:03:07,547 --> 00:03:12,912
What's really different is that we don't 
have a goal, but an initial task network. 

42
00:03:12,912 --> 00:03:17,667
And as for planning domains, we have a 
slightly simpler version here namely, a 

43
00:03:17,667 --> 00:03:22,096
total-order STN planning problem. 
A total-order planning problem is one 

44
00:03:22,096 --> 00:03:26,148
where both the initial network and the 
domain are totally ordered. 

45
00:03:26,148 --> 00:03:30,752
So, in the domain, all the methods need 
to be totally ordered and in the task 

46
00:03:30,752 --> 00:03:35,415
network, that we're initially given, all 
the tasks must be totally ordered. 

47
00:03:35,415 --> 00:03:39,482
If this is the case, then our planning 
problem is totally ordered. 

48
00:03:39,482 --> 00:03:42,494
Ordered. 
STN domains and problems were quite 

49
00:03:42,494 --> 00:03:45,975
straightforward, and should be easy to 
understand. 

50
00:03:45,975 --> 00:03:51,284
STN solutions are a little more complex. 
And the reason for this is simply that, 

51
00:03:51,284 --> 00:03:55,802
the definition is the blueprint for the 
algorithm that will follow. 

52
00:03:55,802 --> 00:04:00,912
So understanding this definition will 
help you understand the algorithm. 

53
00:04:00,912 --> 00:04:03,826
Algorithm. 
What we need to define here is the 

54
00:04:03,826 --> 00:04:08,975
following: we need to define for a given 
planning problem consistent of initial 

55
00:04:08,975 --> 00:04:12,465
state, initial task network, operators 
and methods. 

56
00:04:12,465 --> 00:04:17,664
When does a task pi consisting of actions 
a1 through an constitute a solution for 

57
00:04:17,664 --> 00:04:22,547
this STN planning problem? And this is 
the case, if one of the following 3 

58
00:04:22,547 --> 00:04:26,647
conditions holds. 
And the first condition is quite trivial 

59
00:04:26,647 --> 00:04:29,796
here. 
Namely, if our initial network, Wi, is 

60
00:04:29,796 --> 00:04:32,920
empty. 
So there were no tasks in the network. 

61
00:04:32,920 --> 00:04:37,505
And our plan is also empty. 
Then, this plan constitutes a solution 

62
00:04:37,505 --> 00:04:42,170
for this network in the planning problem. 
So that's quite obvious. 

63
00:04:42,170 --> 00:04:46,852
If there's nothing to do, doing nothing 
is a solution for the problem. 

64
00:04:46,852 --> 00:04:49,889
the next collision is a little more 
complex. 

65
00:04:49,889 --> 00:04:54,773
So suppose there is a primitive task t in 
our network and that task has no 

66
00:04:54,773 --> 00:05:00,240
predecessors in the network so it's one 
of the first components in that network. 

67
00:05:00,240 --> 00:05:05,174
Also suppose that a1 the first action in 
our plan is equal to t. So this action 

68
00:05:05,174 --> 00:05:10,287
accomplishes this first task in our 
network and suppose it is applicable in 

69
00:05:10,287 --> 00:05:15,213
Si the initial state. 
Then we can say our plan, consisting of a 

70
00:05:15,213 --> 00:05:21,007
1 through a n, is a solution to our 
planning problem, including the network 

71
00:05:21,007 --> 00:05:27,286
Wi, if the following conditions hold. 
If the modified plan, pi dash, consisting 

72
00:05:27,286 --> 00:05:32,670
of the actions a2 through an. 
So that's all the actions apart from the 

73
00:05:32,670 --> 00:05:38,067
first one, is a solution for a modified 
Planning problem and this modified 

74
00:05:38,067 --> 00:05:42,759
planning problem simply starts at a 
different initial state and then the 

75
00:05:42,759 --> 00:05:47,814
states that we get after applying the 
action a1 in our previous initial state. 

76
00:05:47,814 --> 00:05:52,822
So we take the successor of our initial 
state given our action a1 given our new 

77
00:05:52,822 --> 00:05:55,871
initial state in our new Planning 
problem. 

78
00:05:55,871 --> 00:06:01,588
And we remove the task t from our task 
network and of course we also remove all 

79
00:06:01,588 --> 00:06:06,256
the edges connected to t. 
The operators and methods remain the 

80
00:06:06,256 --> 00:06:09,471
same. 
So, if our slightly shorter plan is a 

81
00:06:09,471 --> 00:06:15,172
solution for our modified planning 
problem then we know that the longer plan 

82
00:06:15,172 --> 00:06:19,372
is also a solution to our original 
planning problem. 

83
00:06:19,372 --> 00:06:23,812
And the third alternative in our 
definition follows a similar pattern. 

84
00:06:23,812 --> 00:06:27,587
Now we assume there is a non-primitive 
task t in our network. 

85
00:06:27,587 --> 00:06:32,397
Previously it was primitive task, now 
we're looking for a non-primitive task 

86
00:06:32,397 --> 00:06:37,307
that has no predecessors in the network. 
Take one of the first tasks, this time 

87
00:06:37,307 --> 00:06:41,646
it's non-primitive. 
Now, suppose we have a method, M, that is 

88
00:06:41,646 --> 00:06:46,233
relevant for this task. 
That is, there is a substitution, sigma, 

89
00:06:46,233 --> 00:06:49,394
such that sigma(t) is the task of the 
method. 

90
00:06:49,394 --> 00:06:53,062
And suppose this applicable in our 
initial state. 

91
00:06:53,062 --> 00:06:58,220
Then our plan pi is a solution for our 
original planning problem if it is also a 

92
00:06:58,220 --> 00:07:03,668
solution for a modified planning problem. 
And this modified planning problem 

93
00:07:03,668 --> 00:07:08,904
consists of the same initial state. 
But then, we have to decompose the task 

94
00:07:08,904 --> 00:07:14,243
network, Wi, which contains the task t as 
one of it's first task, using method m 

95
00:07:14,243 --> 00:07:18,894
and substitution sigma. 
And this gives us a new task network that 

96
00:07:18,894 --> 00:07:24,325
we take as part of this modified problem. 
And again, the operators and methods 

97
00:07:24,325 --> 00:07:28,255
remain the same. 
So, if our plan pi is a solution to this 

98
00:07:28,255 --> 00:07:32,451
modified problem, then our plan pi is 
also a solution to our original problem. 

99
00:07:34,247 --> 00:07:40,326
What we have here are 3 alternative 
cases, namely the task network is empty 

100
00:07:40,326 --> 00:07:46,614
which means there is no first task in the 
network or the task network has tasks 

101
00:07:46,614 --> 00:07:53,262
that are first in the network and they 
can be either primitive or non-primitive. 

102
00:07:53,262 --> 00:07:56,777
One of these three cases must always 
hold. 

103
00:07:56,777 --> 00:08:02,648
So one of these three branches in the 
definition is always applicable. 

104
00:08:02,648 --> 00:08:08,970
And as I said before, the algorithm that 
we will see for solving STN planning 

105
00:08:08,970 --> 00:08:12,774
problems will closely follow this 
definition. 

