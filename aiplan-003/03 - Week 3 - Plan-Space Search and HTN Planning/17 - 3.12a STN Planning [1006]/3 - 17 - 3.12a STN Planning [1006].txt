Now, that you understand what it means 
for a plan to be a solution to an HTN 
planning problem, we can turn to the 
algorithm that finds these solutions. 
So we will now look at the planning 
procedures that refine task networks 
until we have solutions to our planning 
problems. 
And here is the pseudo code for the 
Ground-TFD procedure. 
TFD here stands for Total order Forward 
Decomposition. 
This procedure deals with total order 
problems and domains only. 
It does a forward decomposition meaning 
it always starts from the initial state 
and tries to build the plan out from 
there. 
And the D is simply for decomposition so 
it uses methods to solve HTN planning 
problems. 
And the input to this records of function 
is a planning problem. 
So, we have an initial state, a total 
order task network, a set of operators 
and a set of methods. 
The outline of the procedure then follows 
exactly the definition we've just seen. 
So, first we have the case where we deal 
with an empty task network as input. 
Then we have the case where the first 
task in the given task network is 
primitive. 
And finally, we have the case where the 
first task in the given task network is 
non primitive. 
The simplest case where k is = to zero. 
That means we have no tasks in our 
initial task network. 
And that means. 
The empty plan is a solution for this 
task network as given in the definition. 
Then, we're dealing with the case where 
T1 is primitive. 
That means there must be an operator that 
has the same name as this task. 
And that means, there must be actions 
that are instances of this operator. 
And that have the same name as the task 
instantiated with some substitution 
sigma. 
And. 
These actions may be applicable in our 
state S. 
So we're only looking at actions that are 
applicable in our state S. 
And that's what we do here. 
We compute the set of actions that are 
unifiable with our first task, t1, and 
are applicable in S. 
And that's the set actions here. 
If this set is empty, then there is no 
way to accomplish this primitive task and 
that means we can return failure or we go 
back to the nearest backtrack point. 
Otherwise, we can choose one of these 
actions from our set of actions and 
refine our plan in that way. 
Note that this choosing here is a 
non-deterministic choice point, so that 
means we may have to backtrack here and 
try a different path, if we fail in the 
current branch. 
Then we apply the definition of a 
solution here. That said, a plan is a 
solution to a planning problem, if a 
modified plan, is a solution to a 
modified planning problem. 
And we do this by recursively calling 
ground TFD here, with the modified 
planning problem. 
Problem is modified as follows; we first 
compute the successor of the initial 
state given our chosen action and that's 
our new initial state. 
Then we take the remainder of our task 
network consisting of the tasks t2 
through tk, and instantiate those with 
our new substitution Ïƒ. 
Note that t1 is no longer in this task 
network and the set of operators and 
methods remains the same. 
Of course, this procedure may return 
failure. 
And in that case, all we have to do is 
pass the failure back up. 
Because this branch in our search does 
not give us a solution. 
Otherwise, the returned plan is part of 
our solution. 
But our action that we've just chosen to 
refine the plan, must be added to the 
plan. 
And in this case, it must be added at the 
beginning. 
Of the plan. 
And then there's the third alternative 
path in this algorithm where our initial 
task T1 is not primitive and that's what 
we have here. 
And in this case what we have to do is 
compute the set of methods that are 
relevant for this given task under some 
substitution sigma, and that are also 
applicable in our initial state Given as 
part of the planning problem. 
And this is the set of methods that we 
can use to refine our plan. 
And again, if this set of methods is 
empty, that means there is no way to 
refine the first task in the network and 
that means we can return failure. 
There is no solution in this branch of 
the search tree. 
Otherwise, we choose one of the methods 
which means we have a non-deterministic 
choice point again. 
We have to come back here if we fail in 
the current branch and choose a different 
method from our set. 
So, we choose a method and substitution. 
And we try to refine our plan with that 
method. 
And in a total order network, this is 
quite simple. 
We take the set of tasks minus the first 
task. 
We remove that from our sequence of 
tasks. 
Instantiate those with our substitution. 
And pre-pend this with the subtasks of 
our method. 
That gives us a modified network that we 
can now test to see whether this is a 
solution to our planning problem and we 
do this by again calling the function 
grant TFD recursively given the same 
initial state our new plan that we've 
just created and the operators and 
methods from the original. 
Planning problem. 
So what this procedure does is take this 
task network, look at the first task in 
the network. 
If this is a non-primitive task, it will 
go in that final branch here where it 
replaces the first task with the 
sub-tasks in a method that is applicable 
and relevant here. 
And then, eventually, this will get to 
finer ground tasks. 
We will get to the second part here. 
Where the first subtask in 1 of these 
methods was primitive. 
And then we get to this part. 
And we remove that task, and recursively 
call this function. 
And hopefully, finally, we end up in the 
first branch, where we've removed all the 
tasks from our network. 
And have a plan that is a solution to our 
plan. 
And here is an example from the DWR 
domain that shall illustrate this 
algorithm. 
We start with the same task we've seen 
before we want to move the stack that is 
in pile p1 to another stack q where q is 
a variable so it is unspecified. 
So the algorithm first takes the first 
task in the sequence of tasks and tests 
whether it is a primitive or non 
primitive task. 
In this case, it is a non primitive task. 
Which means we have to compute the set of 
all relevant and applicable methods, and 
choose one of those. 
And that's what I'm doing here, I'm 
choosing the method recursive-move from 
pile 1. 
1 2 pile 2, where we're moving container 
1 from container 2 as the first part of 
this method. 
Note that I'm making all the right 
choices here that will not require me to 
backtrack anywhere. 
Now we can apply this method to decompose 
the first task in our task network and 
that gives us 2 new subtasks, namely, 
moving the first, the topmost container, 
from pile 1 to pile 2 and moving the 
stack from pile 1 to pile 2. 
So that's recursive. 
Notice that it's ground here, in this 
method. 
p2 is instantiated, and it is 
instantiated in our sub-task as well. 
Then, the procedure, again, takes the 
first sub-task in this new network, which 
is the move-topmost task. 
And because this is a non-primitive task, 
we end up in the third part of the 
algorithm again, which means we choose a 
method. 
And here I'm choosing the take-and-put 
method with some appropriate arguments. 
And I'm using that to refine this task, 
giving me 2 new subtasks and they're grey 
here, because they are now primitive 
subtasks. 
So again the procedure would go through 
the recursive call. 
Take the first subtask in this network, 
which is now the take crane at location 
and so on subtask. 
And I'll have to find an action that 
matches this task. 
And of course there is an action that 
immediately matches this task, so I can 
add this to my plan. 
Then I go to the next first sub task, 
remember we have removed this task now. 
So the next first sub task is this put 
task here. 
And again, there is an action that 
directly matches this task. 
So I can remove this from the task 
network and Look at the next first task. 
Which now, is this move stack task here. 
And again, we end up in the branch, where 
we have to choose a method that refines 
this task, this non primitive task. 
And now, we're choosing recursive move 
here again with different containers. 
And if we refine this task, we get as the 
first sub task, move top-most, and then 
move stack again. 
And we go through the loop again, the 
first sub task is now move top-most. 
And we use a take and put method to 
refine this task giving us 2 primitive 
tasks. 
So we go through the primitive tasks 
again, trying to find actions for those 
tasks. 
And we find an action that matches this 
task and we also find an action that 
matches this task. 
Task and that leaves us with this task 
here as the new first task in our network 
and again this is non primitive task so 
we've got to find a method and use this 
method to refine task into two sub tasks. 
where move-topmost is not the first one 
so we go again into the recursive call We 
find a take and put method that matches 
this task refines it to two primitive 
tasks. 
And again, there are actions for both of 
those. 
So we turn to the final task here, which 
is moving a stack from P1 to P2. 
But now, if I'd shown you the state, 
you'd see that there are no containers in 
here. 
So we can apply the no move method, and 
that gives us the empty plan as the 
result. 
And this is essentially how our 
Ground-TFD Algorithm works. 

