1
00:00:00,012 --> 00:00:05,931
In the next few slides, I will give you 
an overview of the plan-space planning 

2
00:00:05,931 --> 00:00:10,103
algorithm, PSP. 
This will be a generic version of the 

3
00:00:10,103 --> 00:00:16,211
algorithm and I'll follow this with some 
implementation detail that will make 

4
00:00:16,211 --> 00:00:20,487
things more specific. 
So, here's a quick recap of the search 

5
00:00:20,487 --> 00:00:25,398
problem as we've defined it so far. 
We have given the statement of a planning 

6
00:00:25,398 --> 00:00:29,949
problem, consisting of a set of 
operators, an initial state, and a goal 

7
00:00:29,949 --> 00:00:33,354
condition. 
Then, we need to define a search problem 

8
00:00:33,354 --> 00:00:38,170
which consists of an initial state, and 
our initial state was the empty plan, 

9
00:00:38,170 --> 00:00:42,083
which isn't quite empty. 
It consists of the init action and the 

10
00:00:42,083 --> 00:00:45,300
goal action. 
These were the two dummy actions we've 

11
00:00:45,300 --> 00:00:50,195
introduced to encode our initial state 
and the goal condition into the plan. 

12
00:00:50,195 --> 00:00:54,583
And then, we have one ordering 
constraint, namely that the init dummy 

13
00:00:54,583 --> 00:00:57,557
action must come before the goal dummy 
action. 

14
00:00:57,557 --> 00:01:01,726
And we have no variable bindings and no 
causal links initially. 

15
00:01:01,726 --> 00:01:06,775
The goal test, as we have just seen, is 
simply to check whether a plan has flaws. 

16
00:01:06,775 --> 00:01:10,192
If it has no flaws, then our plan is a 
solution state. 

17
00:01:10,192 --> 00:01:13,660
What I haven't mentioned so far is the 
path cost function. 

18
00:01:13,660 --> 00:01:17,945
That's simply because the path cost 
function is not very relevant here. 

19
00:01:17,945 --> 00:01:20,678
You can choose pretty much anything you 
like. 

20
00:01:20,678 --> 00:01:23,395
For example, the length of the plan as 
usual. 

21
00:01:23,395 --> 00:01:27,953
Note that this path cost function would 
not be related to the cost of the plan 

22
00:01:27,953 --> 00:01:31,619
refinement operations, 
but to the cost of the plan that we're 

23
00:01:31,619 --> 00:01:35,111
searching for. 
And the final component of our search 

24
00:01:35,111 --> 00:01:39,625
problem is the successor function. 
And here, we will consider all those 

25
00:01:39,625 --> 00:01:44,398
refinements of our current plan that 
maintain the ordering and the binding 

26
00:01:44,398 --> 00:01:49,409
constraints in a consistent fashion. 
So, our successor function will allow the 

27
00:01:49,409 --> 00:01:54,043
application of more than one plan 
refinement operation at a time. 

28
00:01:54,043 --> 00:02:00,292
And here is an informal overview of the 
basic operations that we need to perform 

29
00:02:00,292 --> 00:02:05,932
during our plan-space search. 
The basic idea, the main principle behind 

30
00:02:05,932 --> 00:02:11,942
the algorithm is that we always refine 
our partial plan while maintaining the 

31
00:02:11,942 --> 00:02:17,053
order and binding constraint, in a 
consistent fashion, until the plan has no 

32
00:02:17,053 --> 00:02:20,412
more flaws. 
In some sense, this is the main loop of 

33
00:02:20,412 --> 00:02:24,215
our algorithm. 
Then, within this main loop, what we have 

34
00:02:24,215 --> 00:02:28,290
to do is first, find the flaws that are 
currently in our plan. 

35
00:02:28,290 --> 00:02:31,747
So, these flaws can be either sub-goals 
or threats. 

36
00:02:31,747 --> 00:02:36,172
We need to identify them, so that we can 
remove them from the plan. 

37
00:02:36,172 --> 00:02:39,316
And we will deal with these flaws one at 
a time. 

38
00:02:39,316 --> 00:02:42,539
So, the next step is to select one of 
those flaws. 

39
00:02:42,539 --> 00:02:48,045
Once we've selected a flaw, we need to 
find all those ways in which the flaw can 

40
00:02:48,045 --> 00:02:51,821
be removed from our plan and which it can 
be resolved. 

41
00:02:51,821 --> 00:02:56,732
And again, we need to choose one of the 
resolvers for the selected flaw. 

42
00:02:56,732 --> 00:03:01,352
And finally, we refine our plan according 
to the chosen resolver. 

43
00:03:01,352 --> 00:03:06,787
So we've selected a flaw, we've chosen a 
way to get rid of this flaw, and now we 

44
00:03:06,787 --> 00:03:11,297
apply this to our partial plan. 
This is the step that corresponds to a 

45
00:03:11,297 --> 00:03:15,857
state transition in our search space. 
And, of course, while we are refining our 

46
00:03:15,857 --> 00:03:20,197
plan with our chosen resolver, we've got 
to make sure that we maintain our 

47
00:03:20,197 --> 00:03:23,827
ordering and binding constraints so these 
two are connected. 

48
00:03:23,827 --> 00:03:27,442
And we need to make sure that our 
constraints are consistent. 

49
00:03:27,442 --> 00:03:31,292
If our constraints are no longer 
consistent after we've applied a 

50
00:03:31,292 --> 00:03:35,802
resolver, then this node is a dead-end in 
our search space. 

51
00:03:35,802 --> 00:03:39,997
And here is what I've just told you in 
pseudo code. 

52
00:03:39,997 --> 00:03:45,172
We define the function PSP that takes a 
partial plan as input. 

53
00:03:45,172 --> 00:03:48,828
The procedure then refines this plan into 
a solution plan. 

54
00:03:48,828 --> 00:03:52,277
Note that there is no planning problem 
given as input. 

55
00:03:52,277 --> 00:03:57,231
That is because, initially the plan that 
is given to this procedure is the empty 

56
00:03:57,231 --> 00:04:02,116
plan which encodes the planning problem 
as it has the dummy steps in it and goal 

57
00:04:02,116 --> 00:04:07,109
having the initial state and the goal. 
Then, the first thing we do is we compute 

58
00:04:07,109 --> 00:04:11,626
all the flaws that are currently in the 
plan, and there are two types of flaws of 

59
00:04:11,626 --> 00:04:15,638
course, namely the openGoals, the 
preconditions that are currently 

60
00:04:15,638 --> 00:04:19,386
unsatisfied, and the threats that exist 
within the current plan. 

61
00:04:19,386 --> 00:04:23,746
And if the set of flaws is empty that 
means we have reached a solution plan 

62
00:04:23,746 --> 00:04:27,472
because as you told you before, no flaws 
means a solution. 

63
00:04:27,472 --> 00:04:32,609
But if there were flaws left in the plan, 
then we can now choose a flaw which is 

64
00:04:32,609 --> 00:04:35,622
the flaw we want to remove from the plan 
next. 

65
00:04:35,622 --> 00:04:40,289
And once we have selected one of the 
flaws, we can compute all possible 

66
00:04:40,289 --> 00:04:43,252
resolvers for this flaw in the current 
plan. 

67
00:04:43,252 --> 00:04:48,438
If the set of resolvers is empty, that 
means there is no way to remove this flaw 

68
00:04:48,438 --> 00:04:53,843
from the plan, and that means we can 
return failure because this partial plan 

69
00:04:53,843 --> 00:04:56,903
can never be refined into a solution 
plan. 

70
00:04:56,903 --> 00:05:02,537
But if there were resolvers in the set, 
then we have to choose one to remove the 

71
00:05:02,537 --> 00:05:06,694
flaw from our plan. 
The next step then is to generate a new 

72
00:05:06,694 --> 00:05:11,762
plan, which consists of applying the 
resolver to our current plan. 

73
00:05:11,762 --> 00:05:15,920
This is the step that generates a new 
search node in our search space. 

74
00:05:15,920 --> 00:05:20,096
And this time, I haven't defined the 
search procedure as an iterative 

75
00:05:20,096 --> 00:05:24,773
procedure but as a recursive procedure 
where the recursive call comes here. 

76
00:05:24,773 --> 00:05:29,636
So, we've generated a new node and we've 
simply applied the PSP procedure to that 

77
00:05:29,636 --> 00:05:32,934
new node. 
Now, there are a few things to say about 

78
00:05:32,934 --> 00:05:36,095
this algorithm. 
Firstly, it contains a number of 

79
00:05:36,095 --> 00:05:40,897
functions that I still have to define. 
For example, how to compute the open 

80
00:05:40,897 --> 00:05:44,442
goals in a plan, 
or how to find the threats that exist in 

81
00:05:44,442 --> 00:05:47,703
a given plan. 
Also, I need to be able to compute the 

82
00:05:47,703 --> 00:05:51,411
resolvers that are available for a given 
flaw in the plan, 

83
00:05:51,411 --> 00:05:55,957
and I need to define how I can apply 
these resolvers to a current plan. 

84
00:05:55,957 --> 00:06:00,424
These are implementation details that I 
will look at, in the next section. 

85
00:06:00,424 --> 00:06:05,387
But before I get here, there are two more 
functions that look quite trivial but are 

86
00:06:05,387 --> 00:06:08,896
actually different. 
As you can see, I've chosen different 

87
00:06:08,896 --> 00:06:12,059
names for this. 
Firstly, we need to select a flaw. And 

88
00:06:12,059 --> 00:06:16,749
secondly, we need choose a resolver. 
And there's a good reason why I've chosen 

89
00:06:16,749 --> 00:06:20,102
two different words for these two 
different functions. 

90
00:06:20,102 --> 00:06:24,875
The two functions, chooseOne and 
selectOne, represent choice points in our 

91
00:06:24,875 --> 00:06:28,082
algorithm. 
Let me first describe the choice point 

92
00:06:28,082 --> 00:06:31,648
where we select a resolver. 
So, we have a function called 

93
00:06:31,648 --> 00:06:36,492
Resolvers.chooseOne that selects one of 
the resolvers for the chosen flaw. 

94
00:06:36,492 --> 00:06:41,695
This is a non-deterministic choice point. 
So, the way the algorithm is described, 

95
00:06:41,695 --> 00:06:46,447
is as a non-deterministic algorithm which 
means we need to turn this into a 

96
00:06:46,447 --> 00:06:51,459
deterministic algorithm for the 
implementation. And this choice point is 

97
00:06:51,459 --> 00:06:55,624
one that we need to backtrack over. 
That means, it's a non-deterministic 

98
00:06:55,624 --> 00:06:58,726
choice point. 
We need to come back here if we fail in 

99
00:06:58,726 --> 00:07:01,714
one branch and try a different branch in 
our search. 

100
00:07:01,714 --> 00:07:06,196
The other choice point where we select 
one of the flaws, that we try to resolve 

101
00:07:06,196 --> 00:07:10,514
next, is a deterministic selection. 
That means, we don't need to backtrack 

102
00:07:10,514 --> 00:07:14,210
over this choice. 
That means, we can choose one of the 

103
00:07:14,210 --> 00:07:19,677
available options and then don't need to 
explore the other options at this point. 

104
00:07:19,677 --> 00:07:24,764
And the reason for this is very simple. 
If a plan contains multiple flaws, we 

105
00:07:24,764 --> 00:07:30,357
need to resolve all these flaws before it 
becomes a solution plan. But the order in 

106
00:07:30,357 --> 00:07:35,242
which we do this is not important. 
Since flaws really dont interfere with 

107
00:07:35,242 --> 00:07:40,126
each other, we can deal with one flaw 
after an other and whichever flaw we 

108
00:07:40,126 --> 00:07:44,247
choose first does not prevent another 
flaw from being resolved. 

109
00:07:44,247 --> 00:07:48,637
So, the order in which we choose the 
flaws is not important, at least not for 

110
00:07:48,637 --> 00:07:51,437
completeness. 
Our algorithm will still work in 

111
00:07:51,437 --> 00:07:55,542
whichever order we choose the flaws. 
But, of course, the order is very 

112
00:07:55,542 --> 00:08:00,264
important for the efficiency of our 
planning algorithm. For example, consider 

113
00:08:00,264 --> 00:08:04,617
a plan that has one flaw for which we 
have no resolver and several flaws for 

114
00:08:04,617 --> 00:08:08,426
which we have resolvers. 
If we first choose those flaws that we 

115
00:08:08,426 --> 00:08:13,047
can resolve and then deal with the flaw 
that has no resolvers lost, we create a 

116
00:08:13,047 --> 00:08:17,802
search tree that has no solution node, of 
course. Whereas, if we first choose the 

117
00:08:17,802 --> 00:08:21,912
one that has no resolvers, we immediately 
terminate our search. 

118
00:08:21,912 --> 00:08:25,094
So, important. 
Flaw selection is a deterministic 

119
00:08:25,094 --> 00:08:30,414
selection and we don't need to backtrack 
over the selection in our implementation. 

120
00:08:30,414 --> 00:08:34,690
Selecting a resolver is a 
non-deterministic choice and we need to 

121
00:08:34,690 --> 00:08:36,958
implement this as a backtrack point. 

