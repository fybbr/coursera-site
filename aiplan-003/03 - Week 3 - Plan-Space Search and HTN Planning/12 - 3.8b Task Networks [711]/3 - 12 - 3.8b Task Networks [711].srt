1
00:00:00,012 --> 00:00:07,344
The next thing we can do then is to group 
the tasks we have just defined into 

2
00:00:07,344 --> 00:00:13,441
simple task networks. 
And such a task network is really just an 

3
00:00:13,441 --> 00:00:19,624
acyclic directed graph. 
And this graph consists of some nodes, 

4
00:00:19,624 --> 00:00:24,892
denoted by the set U and some edges given 
by the set E. 

5
00:00:24,892 --> 00:00:30,214
And the nodes in a task network are 
simply a set of tasks, t1 through tn, 

6
00:00:30,214 --> 00:00:34,923
where each of the elements in the set, t1 
through tn, is a task. 

7
00:00:34,923 --> 00:00:40,061
So, it's a syntactic expression of the 
form given a task symbol and some 

8
00:00:40,061 --> 00:00:45,287
arguments not just a task symbol. 
And then, we have the edges in the task 

9
00:00:45,287 --> 00:00:50,639
network which simply define a partial 
ordering of those tasks in the set U. 

10
00:00:50,639 --> 00:00:56,073
And then, what follows, I will use the 
same notation we've seen previously so 

11
00:00:56,073 --> 00:01:01,502
that I can say that a task ti comes 
before a task tj by using this symbol. 

12
00:01:01,502 --> 00:01:05,871
And that's it. 
That's the task network consisiting of a 

13
00:01:05,871 --> 00:01:11,166
set of tasks, and a set of edges that 
form a acyclic directed graph. 

14
00:01:11,166 --> 00:01:17,020
Note that the graph has to be acyclic. 
And task networks, like tasks, can be 

15
00:01:17,020 --> 00:01:22,379
ground or primative, or both. 
And a task network is considered to be 

16
00:01:22,379 --> 00:01:27,927
ground if all the tasks in it are ground. 
Not just one, but all of them. 

17
00:01:27,927 --> 00:01:33,000
And it's considered primitive if all the 
tasks in our network are primitive. 

18
00:01:33,000 --> 00:01:37,640
And it's ground and primitive if both the 
properties hold for all the tasks in the 

19
00:01:37,640 --> 00:01:40,423
network. 
But if only one task in the network is 

20
00:01:40,423 --> 00:01:43,684
unground, then we consider the whole 
network unground. 

21
00:01:43,684 --> 00:01:48,242
And if only one task in the network is 
non-primitive, then we will say that the 

22
00:01:48,242 --> 00:01:54,587
whole network is non-primitive. 
Apart from being ground and or primitive. 

23
00:01:54,587 --> 00:02:01,097
a task network can also be totally 
ordered or partially ordered. 

24
00:02:01,097 --> 00:02:09,022
To define the ordering of a task network, 
we say that tu comes before tv in the 

25
00:02:09,022 --> 00:02:16,719
network w consisting of nodes U and edges 
E if there is a path from tu to tv. Then, 

26
00:02:16,719 --> 00:02:23,288
we can say that our simple task network, 
w, is totally ordered if the set of edges 

27
00:02:23,288 --> 00:02:27,595
in this network defines a total order on 
our nodes. 

28
00:02:27,595 --> 00:02:34,018
And a total order here means that every 
node is ordered with respect to every 

29
00:02:34,018 --> 00:02:38,196
other node by this network. 
So, there are no two nodes in this 

30
00:02:38,196 --> 00:02:41,573
network that are not ordered with respect 
to each other. 

31
00:02:41,573 --> 00:02:46,429
And if this is the case, then we can take 
our network w and simply represent it as 

32
00:02:46,429 --> 00:02:50,855
a sequence of tasks written like this. 
Here, just like we've written the 

33
00:02:50,855 --> 00:02:55,074
sequence of actions earlier. 
This is a sequence of tasks starting with 

34
00:02:55,074 --> 00:02:58,435
tn and ending in t1, 
which are all totally ordered with 

35
00:02:58,435 --> 00:03:02,799
respect to each other. 
So, this gives us a third property that a 

36
00:03:02,799 --> 00:03:07,682
task network might have. 
A task network can be totally ordered, 

37
00:03:07,682 --> 00:03:11,938
ground, and primitive. 
And if we are given such a network 

38
00:03:11,938 --> 00:03:17,362
described by the sequence t1 through tn, 
then we can define the plan that 

39
00:03:17,362 --> 00:03:23,080
accomplishes this task network by this 
function pi of w, and is simply defined 

40
00:03:23,080 --> 00:03:29,070
as the sequence of actions a1 through an. 
So, it's the same length in the sequence, 

41
00:03:29,070 --> 00:03:35,413
where each ai is the same as the ti. 
So, the name is same as the name of the 

42
00:03:35,413 --> 00:03:41,949
task. In other words, each action 
accomplishes the task that is at the same 

43
00:03:41,949 --> 00:03:46,662
position in the sequence of task in the 
task network. 

44
00:03:46,662 --> 00:03:53,332
And to make sure you understood all this 
correctly, here are a few examples from 

45
00:03:53,332 --> 00:03:57,192
our dock worker robot domain as an STN 
domain. 

46
00:03:57,192 --> 00:04:03,722
The first we have given here is a set of 
tasks, and the first task is t1 described 

47
00:04:03,722 --> 00:04:09,912
by taking with crane application 
container, one from container two in pile 

48
00:04:09,912 --> 00:04:12,502
one. 
This task is primitive. 

49
00:04:12,502 --> 00:04:17,940
It is primitive because we have an 
operator that has the same name, namely 

50
00:04:17,940 --> 00:04:21,369
take. 
And this task is ground because all the 

51
00:04:21,369 --> 00:04:27,042
arguments that are given to this task are 
all objects and not variables. 

52
00:04:27,042 --> 00:04:32,408
Similarly, we have a task t2 which 
consists of the same task symbol, take, 

53
00:04:32,408 --> 00:04:38,771
and it takes, with the crane at the same 
location, container 2 from container 3 in 

54
00:04:38,771 --> 00:04:42,575
pile 1. 
And again, this task is primitive because 

55
00:04:42,575 --> 00:04:46,151
we still have an operator with the same 
name, take. 

56
00:04:46,151 --> 00:04:50,585
And it is ground because all the 
arguments are constants and not 

57
00:04:50,585 --> 00:04:54,005
variables. 
And then, we are given a third task here, 

58
00:04:54,005 --> 00:04:58,174
t3, which is move stack p1, q. 
And this task, of course, is 

59
00:04:58,174 --> 00:05:01,856
non-primitive. 
It is non-primitive because move stack is 

60
00:05:01,856 --> 00:05:07,067
not the name of an operator we've defined 
in the dock worker robot domain, and is 

61
00:05:07,067 --> 00:05:13,057
un-ground, because q here is a variable. 
We're not specifying the stack to which 

62
00:05:13,057 --> 00:05:18,967
we're trying to move our containers. 
So, given these three tasks, we can now 

63
00:05:18,967 --> 00:05:23,972
form task networks. 
And the first network we have is w1, and 

64
00:05:23,972 --> 00:05:28,382
it consists of all three tasks defined 
above, t1, 2, and 3. 

65
00:05:28,382 --> 00:05:34,436
And just two ordering constraints, namely 
t1 before t2, and t1 before t3. 

66
00:05:34,436 --> 00:05:41,048
So, this task network is partially 
ordered because t2 and t3 are not ordered 

67
00:05:41,048 --> 00:05:46,625
with respect to each other. 
It is non-primitive because it does 

68
00:05:46,625 --> 00:05:51,256
contain at least one non-primitive task, 
in this case t3. 

69
00:05:51,256 --> 00:05:57,422
And it is unground because it also 
contains one unground task, again this is 

70
00:05:57,422 --> 00:06:00,317
t3. 
And then, we have a second example of a 

71
00:06:00,317 --> 00:06:05,605
task network, w2. This consists only of 
the first two tasks, t1 and t2, and it 

72
00:06:05,605 --> 00:06:08,895
has only one ordering constraint, t1 
before t2. 

73
00:06:08,895 --> 00:06:13,805
This network is totally ordered and we 
can write it as a sequence t1, t2, 

74
00:06:13,805 --> 00:06:17,981
because all the tasks are ordered with 
respect to each other. 

75
00:06:17,981 --> 00:06:23,371
And then, we can say that this network is 
ground because, again, all the tasks in 

76
00:06:23,371 --> 00:06:28,329
it are ground, t1 and t2, these are the 
two tasks here, were ground and 

77
00:06:28,329 --> 00:06:31,860
primitive. 
And again, since these are the only tasks 

78
00:06:31,860 --> 00:06:35,712
we have here, this whole network is 
ground and primitive. 

79
00:06:35,712 --> 00:06:39,885
So, this is a totally ordered, ground 
primitive task network. 

80
00:06:39,885 --> 00:06:45,020
And that means we can immediately derive 
the plan that accomplishes this task 

81
00:06:45,020 --> 00:06:48,428
network. 
And this is pi of w2, as defined earlier. 

82
00:06:48,428 --> 00:06:53,440
Simply consisting of the two actions that 
have the same name, the syntactic 

83
00:06:53,440 --> 00:06:58,462
expression describing this action, as the 
two tasks in the task network. 

84
00:06:58,462 --> 00:07:02,722
So now, we know what tasks are and we 
know how to form networks out of these 

85
00:07:02,722 --> 00:07:05,377
tasks. 
And for some of these networks, we even 

86
00:07:05,377 --> 00:07:07,982
know how to form plans that accomplish 
these task networks. 

