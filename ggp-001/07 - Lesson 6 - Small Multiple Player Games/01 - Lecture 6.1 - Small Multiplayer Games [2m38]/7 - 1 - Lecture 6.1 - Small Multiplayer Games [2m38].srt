1
00:00:00,000 --> 00:00:07,216
[BLANK_AUDIO]

2
00:00:07,216 --> 00:00:12,193
Having discussed single player games,
let's turn now to multiple player

3
00:00:12,193 --> 00:00:17,509
games.
Such as chess and Othello, and Go,

4
00:00:17,509 --> 00:00:22,586
and Chinese checkers, and so forth.

5
00:00:22,586 --> 00:00:24,146
In most cases, the other players in

6
00:00:24,146 --> 00:00:26,845
these games are general game playing
programs themselves.

7
00:00:26,845 --> 00:00:28,440
Or in some cases, humans.

8
00:00:29,860 --> 00:00:32,520
However in some cases, the other players
represent uncertainty

9
00:00:32,520 --> 00:00:33,060
in the game.

10
00:00:33,060 --> 00:00:37,020
For example, it's common to model some
card games by representing a

11
00:00:37,020 --> 00:00:40,460
randomly shuffled deck of cards as an
additional player in the game.

12
00:00:40,460 --> 00:00:45,210
One that deals, or reveals, cards as the
game progresses.

13
00:00:50,020 --> 00:00:52,210
Before proceeding, it's worth emphasizing
that multiple

14
00:00:52,210 --> 00:00:55,870
player games need not be fixed sum.

15
00:00:55,870 --> 00:00:58,699
In a fixed sum game, the total number of
points is fixed.

16
00:00:59,940 --> 00:01:02,710
When this number is zero, such games are
often said to be zero sum.

17
00:01:04,050 --> 00:01:05,470
In order for one player to get

18
00:01:05,470 --> 00:01:07,700
more points, some other player must lose
points.

19
00:01:09,030 --> 00:01:11,850
For this reason fixed sum games are
necessarily competitive.

20
00:01:13,380 --> 00:01:15,140
In general game playing there's no such
restriction.

21
00:01:15,140 --> 00:01:19,430
Some games are competitive, most games are
competitive, but some are cooperative.

22
00:01:19,430 --> 00:01:21,800
It may be that the only way for one player
to get a

23
00:01:21,800 --> 00:01:25,320
higher reward is to help the other players
to get higher rewards as well.

24
00:01:26,400 --> 00:01:28,170
This is sometimes called variable sum
games.

25
00:01:32,150 --> 00:01:34,750
In this lesson, as in the preceding
lesson, we look at settings

26
00:01:34,750 --> 00:01:38,289
in which there's sufficient time for
players to search the entire game tree.

27
00:01:39,840 --> 00:01:42,400
That said, as in single player games it's
sometimes possible

28
00:01:42,400 --> 00:01:45,810
to find optimal actions even without
searching the entire game tree.

29
00:01:47,710 --> 00:01:50,170
Now the small size does rule out some
interesting

30
00:01:50,170 --> 00:01:53,100
games like chess and Othello, which
require more complicated techniques.

31
00:01:53,100 --> 00:01:57,270
And we'll discuss some of those later.
However, again, the more

32
00:01:57,270 --> 00:01:58,670
complicated techniques can be viewed as

33
00:01:58,670 --> 00:02:01,110
variations on the simple techniques
described here.

34
00:02:04,060 --> 00:02:05,930
Begin this lesson with a procedure called
minimax,

35
00:02:05,930 --> 00:02:10,550
and a more efficient version called
bounded minimax.

36
00:02:12,570 --> 00:02:16,344
We then turn it to an even more efficient
procedure called alpha-beta search.

37
00:02:16,344 --> 00:02:21,094
Which produces the same results, but
eliminates much

38
00:02:21,094 --> 00:02:26,074
of the needless computation of minimax and
bounded minimax.

39
00:02:26,074 --> 00:02:30,325
There's also an analog to sequential
planning called conditional planning.

40
00:02:30,325 --> 00:02:31,890
However it's a little complicated and it's
not used

41
00:02:31,890 --> 00:02:33,850
all that often, so we'll bypass that for
now.

